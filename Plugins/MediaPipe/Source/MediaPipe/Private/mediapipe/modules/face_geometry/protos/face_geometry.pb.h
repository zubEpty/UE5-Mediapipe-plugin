// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/face_geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/formats/matrix_data.pb.h"
#include "mediapipe/modules/face_geometry/protos/mesh_3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto;
namespace mediapipe {
namespace face_geometry {
class FaceGeometry;
class FaceGeometryDefaultTypeInternal;
extern FaceGeometryDefaultTypeInternal _FaceGeometry_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::face_geometry::FaceGeometry* Arena::CreateMaybeMessage<::mediapipe::face_geometry::FaceGeometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {
namespace face_geometry {

// ===================================================================

class FaceGeometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.face_geometry.FaceGeometry) */ {
 public:
  FaceGeometry();
  virtual ~FaceGeometry();

  FaceGeometry(const FaceGeometry& from);
  FaceGeometry(FaceGeometry&& from) noexcept
    : FaceGeometry() {
    *this = ::std::move(from);
  }

  inline FaceGeometry& operator=(const FaceGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceGeometry& operator=(FaceGeometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceGeometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceGeometry* internal_default_instance() {
    return reinterpret_cast<const FaceGeometry*>(
               &_FaceGeometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FaceGeometry& a, FaceGeometry& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceGeometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceGeometry* New() const final {
    return CreateMaybeMessage<FaceGeometry>(nullptr);
  }

  FaceGeometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceGeometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceGeometry& from);
  void MergeFrom(const FaceGeometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceGeometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.face_geometry.FaceGeometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto);
    return ::descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshFieldNumber = 1,
    kPoseTransformMatrixFieldNumber = 2,
  };
  // optional .mediapipe.face_geometry.Mesh3d mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::mediapipe::face_geometry::Mesh3d& mesh() const;
  ::mediapipe::face_geometry::Mesh3d* release_mesh();
  ::mediapipe::face_geometry::Mesh3d* mutable_mesh();
  void set_allocated_mesh(::mediapipe::face_geometry::Mesh3d* mesh);
  private:
  const ::mediapipe::face_geometry::Mesh3d& _internal_mesh() const;
  ::mediapipe::face_geometry::Mesh3d* _internal_mutable_mesh();
  public:

  // optional .mediapipe.MatrixData pose_transform_matrix = 2;
  bool has_pose_transform_matrix() const;
  private:
  bool _internal_has_pose_transform_matrix() const;
  public:
  void clear_pose_transform_matrix();
  const ::mediapipe::MatrixData& pose_transform_matrix() const;
  ::mediapipe::MatrixData* release_pose_transform_matrix();
  ::mediapipe::MatrixData* mutable_pose_transform_matrix();
  void set_allocated_pose_transform_matrix(::mediapipe::MatrixData* pose_transform_matrix);
  private:
  const ::mediapipe::MatrixData& _internal_pose_transform_matrix() const;
  ::mediapipe::MatrixData* _internal_mutable_pose_transform_matrix();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.face_geometry.FaceGeometry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::face_geometry::Mesh3d* mesh_;
  ::mediapipe::MatrixData* pose_transform_matrix_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaceGeometry

// optional .mediapipe.face_geometry.Mesh3d mesh = 1;
inline bool FaceGeometry::_internal_has_mesh() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mesh_ != nullptr);
  return value;
}
inline bool FaceGeometry::has_mesh() const {
  return _internal_has_mesh();
}
inline const ::mediapipe::face_geometry::Mesh3d& FaceGeometry::_internal_mesh() const {
  const ::mediapipe::face_geometry::Mesh3d* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::face_geometry::Mesh3d*>(
      &::mediapipe::face_geometry::_Mesh3d_default_instance_);
}
inline const ::mediapipe::face_geometry::Mesh3d& FaceGeometry::mesh() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.FaceGeometry.mesh)
  return _internal_mesh();
}
inline ::mediapipe::face_geometry::Mesh3d* FaceGeometry::release_mesh() {
  // @@protoc_insertion_point(field_release:mediapipe.face_geometry.FaceGeometry.mesh)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::face_geometry::Mesh3d* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::mediapipe::face_geometry::Mesh3d* FaceGeometry::_internal_mutable_mesh() {
  _has_bits_[0] |= 0x00000001u;
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::face_geometry::Mesh3d>(GetArenaNoVirtual());
    mesh_ = p;
  }
  return mesh_;
}
inline ::mediapipe::face_geometry::Mesh3d* FaceGeometry::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:mediapipe.face_geometry.FaceGeometry.mesh)
  return _internal_mutable_mesh();
}
inline void FaceGeometry::set_allocated_mesh(::mediapipe::face_geometry::Mesh3d* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.face_geometry.FaceGeometry.mesh)
}

// optional .mediapipe.MatrixData pose_transform_matrix = 2;
inline bool FaceGeometry::_internal_has_pose_transform_matrix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pose_transform_matrix_ != nullptr);
  return value;
}
inline bool FaceGeometry::has_pose_transform_matrix() const {
  return _internal_has_pose_transform_matrix();
}
inline const ::mediapipe::MatrixData& FaceGeometry::_internal_pose_transform_matrix() const {
  const ::mediapipe::MatrixData* p = pose_transform_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::MatrixData*>(
      &::mediapipe::_MatrixData_default_instance_);
}
inline const ::mediapipe::MatrixData& FaceGeometry::pose_transform_matrix() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.FaceGeometry.pose_transform_matrix)
  return _internal_pose_transform_matrix();
}
inline ::mediapipe::MatrixData* FaceGeometry::release_pose_transform_matrix() {
  // @@protoc_insertion_point(field_release:mediapipe.face_geometry.FaceGeometry.pose_transform_matrix)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MatrixData* temp = pose_transform_matrix_;
  pose_transform_matrix_ = nullptr;
  return temp;
}
inline ::mediapipe::MatrixData* FaceGeometry::_internal_mutable_pose_transform_matrix() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_transform_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MatrixData>(GetArenaNoVirtual());
    pose_transform_matrix_ = p;
  }
  return pose_transform_matrix_;
}
inline ::mediapipe::MatrixData* FaceGeometry::mutable_pose_transform_matrix() {
  // @@protoc_insertion_point(field_mutable:mediapipe.face_geometry.FaceGeometry.pose_transform_matrix)
  return _internal_mutable_pose_transform_matrix();
}
inline void FaceGeometry::set_allocated_pose_transform_matrix(::mediapipe::MatrixData* pose_transform_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_transform_matrix_);
  }
  if (pose_transform_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose_transform_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_transform_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_transform_matrix_ = pose_transform_matrix;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.face_geometry.FaceGeometry.pose_transform_matrix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace face_geometry
}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto
