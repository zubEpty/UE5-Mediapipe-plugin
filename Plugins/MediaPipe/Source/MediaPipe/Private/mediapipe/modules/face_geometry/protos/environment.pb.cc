// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/environment.proto

#include "mediapipe/modules/face_geometry/protos/environment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto;
namespace mediapipe {
namespace face_geometry {
class PerspectiveCameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerspectiveCamera> _instance;
} _PerspectiveCamera_default_instance_;
class EnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Environment> _instance;
} _Environment_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
static void InitDefaultsscc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::face_geometry::_Environment_default_instance_;
    new (ptr) ::mediapipe::face_geometry::Environment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::face_geometry::Environment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto}, {
      &scc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base,}};

static void InitDefaultsscc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::face_geometry::_PerspectiveCamera_default_instance_;
    new (ptr) ::mediapipe::face_geometry::PerspectiveCamera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::face_geometry::PerspectiveCamera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::PerspectiveCamera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::PerspectiveCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::PerspectiveCamera, vertical_fov_degrees_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::PerspectiveCamera, near_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::PerspectiveCamera, far_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Environment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Environment, origin_point_location_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Environment, perspective_camera_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::face_geometry::PerspectiveCamera)},
  { 11, 18, sizeof(::mediapipe::face_geometry::Environment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_PerspectiveCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_Environment_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8mediapipe/modules/face_geometry/protos"
  "/environment.proto\022\027mediapipe.face_geome"
  "try\"L\n\021PerspectiveCamera\022\034\n\024vertical_fov"
  "_degrees\030\001 \001(\002\022\014\n\004near\030\002 \001(\002\022\013\n\003far\030\003 \001("
  "\002\"\242\001\n\013Environment\022K\n\025origin_point_locati"
  "on\030\001 \001(\0162,.mediapipe.face_geometry.Origi"
  "nPointLocation\022F\n\022perspective_camera\030\002 \001"
  "(\0132*.mediapipe.face_geometry.Perspective"
  "Camera*B\n\023OriginPointLocation\022\026\n\022BOTTOM_"
  "LEFT_CORNER\020\001\022\023\n\017TOP_LEFT_CORNER\020\002B=\n)co"
  "m.google.mediapipe.modules.facegeometryB"
  "\020EnvironmentProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_sccs[2] = {
  &scc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base,
  &scc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_once;
static bool descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto = {
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_initialized, descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto, "mediapipe/modules/face_geometry/protos/environment.proto", 457,
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_once, descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_sccs, descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto, 2, file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto), true);
namespace mediapipe {
namespace face_geometry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OriginPointLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto[0];
}
bool OriginPointLocation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PerspectiveCamera::InitAsDefaultInstance() {
}
class PerspectiveCamera::_Internal {
 public:
  using HasBits = decltype(std::declval<PerspectiveCamera>()._has_bits_);
  static void set_has_vertical_fov_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_near(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_far(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerspectiveCamera::PerspectiveCamera()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.face_geometry.PerspectiveCamera)
}
PerspectiveCamera::PerspectiveCamera(const PerspectiveCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vertical_fov_degrees_, &from.vertical_fov_degrees_,
    static_cast<size_t>(reinterpret_cast<char*>(&far_) -
    reinterpret_cast<char*>(&vertical_fov_degrees_)) + sizeof(far_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.PerspectiveCamera)
}

void PerspectiveCamera::SharedCtor() {
  ::memset(&vertical_fov_degrees_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&far_) -
      reinterpret_cast<char*>(&vertical_fov_degrees_)) + sizeof(far_));
}

PerspectiveCamera::~PerspectiveCamera() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.PerspectiveCamera)
  SharedDtor();
}

void PerspectiveCamera::SharedDtor() {
}

void PerspectiveCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerspectiveCamera& PerspectiveCamera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerspectiveCamera_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base);
  return *internal_default_instance();
}


void PerspectiveCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.PerspectiveCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&vertical_fov_degrees_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&far_) -
        reinterpret_cast<char*>(&vertical_fov_degrees_)) + sizeof(far_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PerspectiveCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float vertical_fov_degrees = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vertical_fov_degrees(&has_bits);
          vertical_fov_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float near = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_near(&has_bits);
          near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float far = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_far(&has_bits);
          far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerspectiveCamera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.PerspectiveCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vertical_fov_degrees = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vertical_fov_degrees(), target);
  }

  // optional float near = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_near(), target);
  }

  // optional float far = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_far(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.PerspectiveCamera)
  return target;
}

size_t PerspectiveCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.PerspectiveCamera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float vertical_fov_degrees = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float near = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float far = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerspectiveCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.face_geometry.PerspectiveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const PerspectiveCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerspectiveCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.face_geometry.PerspectiveCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.face_geometry.PerspectiveCamera)
    MergeFrom(*source);
  }
}

void PerspectiveCamera::MergeFrom(const PerspectiveCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.PerspectiveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      vertical_fov_degrees_ = from.vertical_fov_degrees_;
    }
    if (cached_has_bits & 0x00000002u) {
      near_ = from.near_;
    }
    if (cached_has_bits & 0x00000004u) {
      far_ = from.far_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerspectiveCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.face_geometry.PerspectiveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerspectiveCamera::CopyFrom(const PerspectiveCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.PerspectiveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerspectiveCamera::IsInitialized() const {
  return true;
}

void PerspectiveCamera::InternalSwap(PerspectiveCamera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vertical_fov_degrees_, other->vertical_fov_degrees_);
  swap(near_, other->near_);
  swap(far_, other->far_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerspectiveCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Environment::InitAsDefaultInstance() {
  ::mediapipe::face_geometry::_Environment_default_instance_._instance.get_mutable()->perspective_camera_ = const_cast< ::mediapipe::face_geometry::PerspectiveCamera*>(
      ::mediapipe::face_geometry::PerspectiveCamera::internal_default_instance());
}
class Environment::_Internal {
 public:
  using HasBits = decltype(std::declval<Environment>()._has_bits_);
  static void set_has_origin_point_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::face_geometry::PerspectiveCamera& perspective_camera(const Environment* msg);
  static void set_has_perspective_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::face_geometry::PerspectiveCamera&
Environment::_Internal::perspective_camera(const Environment* msg) {
  return *msg->perspective_camera_;
}
Environment::Environment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.face_geometry.Environment)
}
Environment::Environment(const Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_perspective_camera()) {
    perspective_camera_ = new ::mediapipe::face_geometry::PerspectiveCamera(*from.perspective_camera_);
  } else {
    perspective_camera_ = nullptr;
  }
  origin_point_location_ = from.origin_point_location_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.Environment)
}

void Environment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base);
  perspective_camera_ = nullptr;
  origin_point_location_ = 1;
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.Environment)
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != internal_default_instance()) delete perspective_camera_;
}

void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Environment& Environment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Environment_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto.base);
  return *internal_default_instance();
}


void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perspective_camera_ != nullptr);
      perspective_camera_->Clear();
    }
    origin_point_location_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Environment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.face_geometry.OriginPointLocation origin_point_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::face_geometry::OriginPointLocation_IsValid(val))) {
            _internal_set_origin_point_location(static_cast<::mediapipe::face_geometry::OriginPointLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.face_geometry.PerspectiveCamera perspective_camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perspective_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Environment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.face_geometry.OriginPointLocation origin_point_location = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_origin_point_location(), target);
  }

  // optional .mediapipe.face_geometry.PerspectiveCamera perspective_camera = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::perspective_camera(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.Environment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.face_geometry.PerspectiveCamera perspective_camera = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perspective_camera_);
    }

    // optional .mediapipe.face_geometry.OriginPointLocation origin_point_location = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_origin_point_location());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.face_geometry.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Environment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.face_geometry.Environment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.face_geometry.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_perspective_camera()->::mediapipe::face_geometry::PerspectiveCamera::MergeFrom(from._internal_perspective_camera());
    }
    if (cached_has_bits & 0x00000002u) {
      origin_point_location_ = from.origin_point_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Environment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.face_geometry.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::InternalSwap(Environment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(perspective_camera_, other->perspective_camera_);
  swap(origin_point_location_, other->origin_point_location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Environment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::PerspectiveCamera* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::PerspectiveCamera >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::face_geometry::PerspectiveCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::Environment* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::Environment >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::face_geometry::Environment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
