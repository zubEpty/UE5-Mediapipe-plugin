// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/geometry_pipeline_metadata.proto

#include "mediapipe/modules/face_geometry/protos/geometry_pipeline_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mesh3d_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto;
namespace mediapipe {
namespace face_geometry {
class WeightedLandmarkRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedLandmarkRef> _instance;
} _WeightedLandmarkRef_default_instance_;
class GeometryPipelineMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryPipelineMetadata> _instance;
} _GeometryPipelineMetadata_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
static void InitDefaultsscc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::face_geometry::_GeometryPipelineMetadata_default_instance_;
    new (ptr) ::mediapipe::face_geometry::GeometryPipelineMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::face_geometry::GeometryPipelineMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto}, {
      &scc_info_Mesh3d_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto.base,
      &scc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::face_geometry::_WeightedLandmarkRef_default_instance_;
    new (ptr) ::mediapipe::face_geometry::WeightedLandmarkRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::face_geometry::WeightedLandmarkRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::WeightedLandmarkRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::WeightedLandmarkRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::WeightedLandmarkRef, landmark_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::WeightedLandmarkRef, weight_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::GeometryPipelineMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::GeometryPipelineMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::GeometryPipelineMetadata, input_source_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::GeometryPipelineMetadata, canonical_mesh_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::GeometryPipelineMetadata, procrustes_landmark_basis_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mediapipe::face_geometry::WeightedLandmarkRef)},
  { 9, 17, sizeof(::mediapipe::face_geometry::GeometryPipelineMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_WeightedLandmarkRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_GeometryPipelineMetadata_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nGmediapipe/modules/face_geometry/protos"
  "/geometry_pipeline_metadata.proto\022\027media"
  "pipe.face_geometry\0324mediapipe/modules/fa"
  "ce_geometry/protos/mesh_3d.proto\":\n\023Weig"
  "htedLandmarkRef\022\023\n\013landmark_id\030\001 \001(\r\022\016\n\006"
  "weight\030\002 \001(\002\"\340\001\n\030GeometryPipelineMetadat"
  "a\022:\n\014input_source\030\003 \001(\0162$.mediapipe.face"
  "_geometry.InputSource\0227\n\016canonical_mesh\030"
  "\001 \001(\0132\037.mediapipe.face_geometry.Mesh3d\022O"
  "\n\031procrustes_landmark_basis\030\002 \003(\0132,.medi"
  "apipe.face_geometry.WeightedLandmarkRef*"
  "S\n\013InputSource\022\013\n\007DEFAULT\020\000\022\032\n\026FACE_LAND"
  "MARK_PIPELINE\020\001\022\033\n\027FACE_DETECTION_PIPELI"
  "NE\020\002BJ\n)com.google.mediapipe.modules.fac"
  "egeometryB\035GeometryPipelineMetadataProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_sccs[2] = {
  &scc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base,
  &scc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_once;
static bool descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto = {
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_initialized, descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto, "mediapipe/modules/face_geometry/protos/geometry_pipeline_metadata.proto", 600,
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_once, descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_sccs, descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto, 2, file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto), true);
namespace mediapipe {
namespace face_geometry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto[0];
}
bool InputSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void WeightedLandmarkRef::InitAsDefaultInstance() {
}
class WeightedLandmarkRef::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedLandmarkRef>()._has_bits_);
  static void set_has_landmark_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeightedLandmarkRef::WeightedLandmarkRef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.face_geometry.WeightedLandmarkRef)
}
WeightedLandmarkRef::WeightedLandmarkRef(const WeightedLandmarkRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&landmark_id_, &from.landmark_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&landmark_id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.WeightedLandmarkRef)
}

void WeightedLandmarkRef::SharedCtor() {
  ::memset(&landmark_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&landmark_id_)) + sizeof(weight_));
}

WeightedLandmarkRef::~WeightedLandmarkRef() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.WeightedLandmarkRef)
  SharedDtor();
}

void WeightedLandmarkRef::SharedDtor() {
}

void WeightedLandmarkRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedLandmarkRef& WeightedLandmarkRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedLandmarkRef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void WeightedLandmarkRef::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.WeightedLandmarkRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&landmark_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&landmark_id_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WeightedLandmarkRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 landmark_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_landmark_id(&has_bits);
          landmark_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedLandmarkRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.WeightedLandmarkRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 landmark_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_landmark_id(), target);
  }

  // optional float weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.WeightedLandmarkRef)
  return target;
}

size_t WeightedLandmarkRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.WeightedLandmarkRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 landmark_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_landmark_id());
    }

    // optional float weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedLandmarkRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.face_geometry.WeightedLandmarkRef)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedLandmarkRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedLandmarkRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.face_geometry.WeightedLandmarkRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.face_geometry.WeightedLandmarkRef)
    MergeFrom(*source);
  }
}

void WeightedLandmarkRef::MergeFrom(const WeightedLandmarkRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.WeightedLandmarkRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      landmark_id_ = from.landmark_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedLandmarkRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.face_geometry.WeightedLandmarkRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedLandmarkRef::CopyFrom(const WeightedLandmarkRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.WeightedLandmarkRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedLandmarkRef::IsInitialized() const {
  return true;
}

void WeightedLandmarkRef::InternalSwap(WeightedLandmarkRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(landmark_id_, other->landmark_id_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedLandmarkRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryPipelineMetadata::InitAsDefaultInstance() {
  ::mediapipe::face_geometry::_GeometryPipelineMetadata_default_instance_._instance.get_mutable()->canonical_mesh_ = const_cast< ::mediapipe::face_geometry::Mesh3d*>(
      ::mediapipe::face_geometry::Mesh3d::internal_default_instance());
}
class GeometryPipelineMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<GeometryPipelineMetadata>()._has_bits_);
  static void set_has_input_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::face_geometry::Mesh3d& canonical_mesh(const GeometryPipelineMetadata* msg);
  static void set_has_canonical_mesh(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::face_geometry::Mesh3d&
GeometryPipelineMetadata::_Internal::canonical_mesh(const GeometryPipelineMetadata* msg) {
  return *msg->canonical_mesh_;
}
void GeometryPipelineMetadata::clear_canonical_mesh() {
  if (canonical_mesh_ != nullptr) canonical_mesh_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GeometryPipelineMetadata::GeometryPipelineMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.face_geometry.GeometryPipelineMetadata)
}
GeometryPipelineMetadata::GeometryPipelineMetadata(const GeometryPipelineMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      procrustes_landmark_basis_(from.procrustes_landmark_basis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_canonical_mesh()) {
    canonical_mesh_ = new ::mediapipe::face_geometry::Mesh3d(*from.canonical_mesh_);
  } else {
    canonical_mesh_ = nullptr;
  }
  input_source_ = from.input_source_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.GeometryPipelineMetadata)
}

void GeometryPipelineMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base);
  ::memset(&canonical_mesh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_source_) -
      reinterpret_cast<char*>(&canonical_mesh_)) + sizeof(input_source_));
}

GeometryPipelineMetadata::~GeometryPipelineMetadata() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.GeometryPipelineMetadata)
  SharedDtor();
}

void GeometryPipelineMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete canonical_mesh_;
}

void GeometryPipelineMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryPipelineMetadata& GeometryPipelineMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryPipelineMetadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fgeometry_5fpipeline_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void GeometryPipelineMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procrustes_landmark_basis_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(canonical_mesh_ != nullptr);
    canonical_mesh_->Clear();
  }
  input_source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GeometryPipelineMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mediapipe.face_geometry.Mesh3d canonical_mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_canonical_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.face_geometry.WeightedLandmarkRef procrustes_landmark_basis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procrustes_landmark_basis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.face_geometry.InputSource input_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::face_geometry::InputSource_IsValid(val))) {
            _internal_set_input_source(static_cast<::mediapipe::face_geometry::InputSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryPipelineMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.face_geometry.Mesh3d canonical_mesh = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::canonical_mesh(this), target, stream);
  }

  // repeated .mediapipe.face_geometry.WeightedLandmarkRef procrustes_landmark_basis = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procrustes_landmark_basis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_procrustes_landmark_basis(i), target, stream);
  }

  // optional .mediapipe.face_geometry.InputSource input_source = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_input_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.GeometryPipelineMetadata)
  return target;
}

size_t GeometryPipelineMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.face_geometry.WeightedLandmarkRef procrustes_landmark_basis = 2;
  total_size += 1UL * this->_internal_procrustes_landmark_basis_size();
  for (const auto& msg : this->procrustes_landmark_basis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.face_geometry.Mesh3d canonical_mesh = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canonical_mesh_);
    }

    // optional .mediapipe.face_geometry.InputSource input_source = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryPipelineMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryPipelineMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryPipelineMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.face_geometry.GeometryPipelineMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.face_geometry.GeometryPipelineMetadata)
    MergeFrom(*source);
  }
}

void GeometryPipelineMetadata::MergeFrom(const GeometryPipelineMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  procrustes_landmark_basis_.MergeFrom(from.procrustes_landmark_basis_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_canonical_mesh()->::mediapipe::face_geometry::Mesh3d::MergeFrom(from._internal_canonical_mesh());
    }
    if (cached_has_bits & 0x00000002u) {
      input_source_ = from.input_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeometryPipelineMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryPipelineMetadata::CopyFrom(const GeometryPipelineMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.GeometryPipelineMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryPipelineMetadata::IsInitialized() const {
  return true;
}

void GeometryPipelineMetadata::InternalSwap(GeometryPipelineMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  procrustes_landmark_basis_.InternalSwap(&other->procrustes_landmark_basis_);
  swap(canonical_mesh_, other->canonical_mesh_);
  swap(input_source_, other->input_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryPipelineMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::WeightedLandmarkRef* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::WeightedLandmarkRef >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::face_geometry::WeightedLandmarkRef >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::GeometryPipelineMetadata* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::GeometryPipelineMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::face_geometry::GeometryPipelineMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
