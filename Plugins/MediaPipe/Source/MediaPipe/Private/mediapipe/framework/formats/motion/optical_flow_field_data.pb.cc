// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/motion/optical_flow_field_data.proto

#include "mediapipe/framework/formats/motion/optical_flow_field_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mediapipe {
class OpticalFlowFieldDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpticalFlowFieldData> _instance;
} _OpticalFlowFieldData_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_OpticalFlowFieldData_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_OpticalFlowFieldData_default_instance_;
    new (ptr) ::mediapipe::OpticalFlowFieldData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::OpticalFlowFieldData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpticalFlowFieldData_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpticalFlowFieldData_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpticalFlowFieldData, dy_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mediapipe::OpticalFlowFieldData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_OpticalFlowFieldData_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@mediapipe/framework/formats/motion/opt"
  "ical_flow_field_data.proto\022\tmediapipe\"U\n"
  "\024OpticalFlowFieldData\022\r\n\005width\030\001 \001(\005\022\016\n\006"
  "height\030\002 \001(\005\022\016\n\002dx\030\003 \003(\002B\002\020\001\022\016\n\002dy\030\004 \003(\002"
  "B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_sccs[1] = {
  &scc_info_OpticalFlowFieldData_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_once;
static bool descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto = {
  &descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_initialized, descriptor_table_protodef_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto, "mediapipe/framework/formats/motion/optical_flow_field_data.proto", 164,
  &descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_once, descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_sccs, descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto::offsets,
  file_level_metadata_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto, 1, file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto, file_level_service_descriptors_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto), true);
namespace mediapipe {

// ===================================================================

void OpticalFlowFieldData::InitAsDefaultInstance() {
}
class OpticalFlowFieldData::_Internal {
 public:
  using HasBits = decltype(std::declval<OpticalFlowFieldData>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OpticalFlowFieldData::OpticalFlowFieldData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.OpticalFlowFieldData)
}
OpticalFlowFieldData::OpticalFlowFieldData(const OpticalFlowFieldData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dx_(from.dx_),
      dy_(from.dy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.OpticalFlowFieldData)
}

void OpticalFlowFieldData::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

OpticalFlowFieldData::~OpticalFlowFieldData() {
  // @@protoc_insertion_point(destructor:mediapipe.OpticalFlowFieldData)
  SharedDtor();
}

void OpticalFlowFieldData::SharedDtor() {
}

void OpticalFlowFieldData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpticalFlowFieldData& OpticalFlowFieldData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpticalFlowFieldData_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpticalFlowFieldData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.OpticalFlowFieldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dx_.Clear();
  dy_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpticalFlowFieldData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float dx = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_dx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float dy = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_dy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpticalFlowFieldData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.OpticalFlowFieldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated float dx = 3 [packed = true];
  if (this->_internal_dx_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_dx(), target);
  }

  // repeated float dy = 4 [packed = true];
  if (this->_internal_dy_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_dy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.OpticalFlowFieldData)
  return target;
}

size_t OpticalFlowFieldData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.OpticalFlowFieldData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float dx = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dx_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float dy = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpticalFlowFieldData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.OpticalFlowFieldData)
  GOOGLE_DCHECK_NE(&from, this);
  const OpticalFlowFieldData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpticalFlowFieldData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.OpticalFlowFieldData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.OpticalFlowFieldData)
    MergeFrom(*source);
  }
}

void OpticalFlowFieldData::MergeFrom(const OpticalFlowFieldData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.OpticalFlowFieldData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dx_.MergeFrom(from.dx_);
  dy_.MergeFrom(from.dy_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpticalFlowFieldData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.OpticalFlowFieldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalFlowFieldData::CopyFrom(const OpticalFlowFieldData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.OpticalFlowFieldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalFlowFieldData::IsInitialized() const {
  return true;
}

void OpticalFlowFieldData::InternalSwap(OpticalFlowFieldData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dx_.InternalSwap(&other->dx_);
  dy_.InternalSwap(&other->dy_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpticalFlowFieldData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::OpticalFlowFieldData* Arena::CreateMaybeMessage< ::mediapipe::OpticalFlowFieldData >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::OpticalFlowFieldData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
