// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/formats/location_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2fdetection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto;
namespace mediapipe {
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class DetectionList;
class DetectionListDefaultTypeInternal;
extern DetectionListDefaultTypeInternal _DetectionList_default_instance_;
class Detection_AssociatedDetection;
class Detection_AssociatedDetectionDefaultTypeInternal;
extern Detection_AssociatedDetectionDefaultTypeInternal _Detection_AssociatedDetection_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::Detection* Arena::CreateMaybeMessage<::mediapipe::Detection>(Arena*);
template<> ::mediapipe::DetectionList* Arena::CreateMaybeMessage<::mediapipe::DetectionList>(Arena*);
template<> ::mediapipe::Detection_AssociatedDetection* Arena::CreateMaybeMessage<::mediapipe::Detection_AssociatedDetection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class Detection_AssociatedDetection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Detection.AssociatedDetection) */ {
 public:
  Detection_AssociatedDetection();
  virtual ~Detection_AssociatedDetection();

  Detection_AssociatedDetection(const Detection_AssociatedDetection& from);
  Detection_AssociatedDetection(Detection_AssociatedDetection&& from) noexcept
    : Detection_AssociatedDetection() {
    *this = ::std::move(from);
  }

  inline Detection_AssociatedDetection& operator=(const Detection_AssociatedDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection_AssociatedDetection& operator=(Detection_AssociatedDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection_AssociatedDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection_AssociatedDetection* internal_default_instance() {
    return reinterpret_cast<const Detection_AssociatedDetection*>(
               &_Detection_AssociatedDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Detection_AssociatedDetection& a, Detection_AssociatedDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection_AssociatedDetection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection_AssociatedDetection* New() const final {
    return CreateMaybeMessage<Detection_AssociatedDetection>(nullptr);
  }

  Detection_AssociatedDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection_AssociatedDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection_AssociatedDetection& from);
  void MergeFrom(const Detection_AssociatedDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection_AssociatedDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Detection.AssociatedDetection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Detection.AssociatedDetection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float confidence_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fdetection_2eproto;
};
// -------------------------------------------------------------------

class Detection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Detection) */ {
 public:
  Detection();
  virtual ~Detection();

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const final {
    return CreateMaybeMessage<Detection>(nullptr);
  }

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Detection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Detection_AssociatedDetection AssociatedDetection;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kLabelIdFieldNumber = 2,
    kScoreFieldNumber = 3,
    kAssociatedDetectionsFieldNumber = 8,
    kDisplayNameFieldNumber = 9,
    kFeatureTagFieldNumber = 5,
    kTrackIdFieldNumber = 6,
    kLocationDataFieldNumber = 4,
    kDetectionIdFieldNumber = 7,
    kTimestampUsecFieldNumber = 10,
  };
  // repeated string label = 1;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  const std::string& label(int index) const;
  std::string* mutable_label(int index);
  void set_label(int index, const std::string& value);
  void set_label(int index, std::string&& value);
  void set_label(int index, const char* value);
  void set_label(int index, const char* value, size_t size);
  std::string* add_label();
  void add_label(const std::string& value);
  void add_label(std::string&& value);
  void add_label(const char* value);
  void add_label(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_label();
  private:
  const std::string& _internal_label(int index) const;
  std::string* _internal_add_label();
  public:

  // repeated int32 label_id = 2 [packed = true];
  int label_id_size() const;
  private:
  int _internal_label_id_size() const;
  public:
  void clear_label_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_label_id() const;
  void _internal_add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_label_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 label_id(int index) const;
  void set_label_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      label_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_label_id();

  // repeated float score = 3 [packed = true];
  int score_size() const;
  private:
  int _internal_score_size() const;
  public:
  void clear_score();
  private:
  float _internal_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_score() const;
  void _internal_add_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_score();
  public:
  float score(int index) const;
  void set_score(int index, float value);
  void add_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score();

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  int associated_detections_size() const;
  private:
  int _internal_associated_detections_size() const;
  public:
  void clear_associated_detections();
  ::mediapipe::Detection_AssociatedDetection* mutable_associated_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >*
      mutable_associated_detections();
  private:
  const ::mediapipe::Detection_AssociatedDetection& _internal_associated_detections(int index) const;
  ::mediapipe::Detection_AssociatedDetection* _internal_add_associated_detections();
  public:
  const ::mediapipe::Detection_AssociatedDetection& associated_detections(int index) const;
  ::mediapipe::Detection_AssociatedDetection* add_associated_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >&
      associated_detections() const;

  // repeated string display_name = 9;
  int display_name_size() const;
  private:
  int _internal_display_name_size() const;
  public:
  void clear_display_name();
  const std::string& display_name(int index) const;
  std::string* mutable_display_name(int index);
  void set_display_name(int index, const std::string& value);
  void set_display_name(int index, std::string&& value);
  void set_display_name(int index, const char* value);
  void set_display_name(int index, const char* value, size_t size);
  std::string* add_display_name();
  void add_display_name(const std::string& value);
  void add_display_name(std::string&& value);
  void add_display_name(const char* value);
  void add_display_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& display_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_display_name();
  private:
  const std::string& _internal_display_name(int index) const;
  std::string* _internal_add_display_name();
  public:

  // optional string feature_tag = 5;
  bool has_feature_tag() const;
  private:
  bool _internal_has_feature_tag() const;
  public:
  void clear_feature_tag();
  const std::string& feature_tag() const;
  void set_feature_tag(const std::string& value);
  void set_feature_tag(std::string&& value);
  void set_feature_tag(const char* value);
  void set_feature_tag(const char* value, size_t size);
  std::string* mutable_feature_tag();
  std::string* release_feature_tag();
  void set_allocated_feature_tag(std::string* feature_tag);
  private:
  const std::string& _internal_feature_tag() const;
  void _internal_set_feature_tag(const std::string& value);
  std::string* _internal_mutable_feature_tag();
  public:

  // optional string track_id = 6;
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);
  private:
  const std::string& _internal_track_id() const;
  void _internal_set_track_id(const std::string& value);
  std::string* _internal_mutable_track_id();
  public:

  // optional .mediapipe.LocationData location_data = 4;
  bool has_location_data() const;
  private:
  bool _internal_has_location_data() const;
  public:
  void clear_location_data();
  const ::mediapipe::LocationData& location_data() const;
  ::mediapipe::LocationData* release_location_data();
  ::mediapipe::LocationData* mutable_location_data();
  void set_allocated_location_data(::mediapipe::LocationData* location_data);
  private:
  const ::mediapipe::LocationData& _internal_location_data() const;
  ::mediapipe::LocationData* _internal_mutable_location_data();
  public:

  // optional int64 detection_id = 7;
  bool has_detection_id() const;
  private:
  bool _internal_has_detection_id() const;
  public:
  void clear_detection_id();
  ::PROTOBUF_NAMESPACE_ID::int64 detection_id() const;
  void set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_detection_id() const;
  void _internal_set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timestamp_usec = 10;
  bool has_timestamp_usec() const;
  private:
  bool _internal_has_timestamp_usec() const;
  public:
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Detection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > label_id_;
  mutable std::atomic<int> _label_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_;
  mutable std::atomic<int> _score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection > associated_detections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::mediapipe::LocationData* location_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 detection_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fdetection_2eproto;
};
// -------------------------------------------------------------------

class DetectionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.DetectionList) */ {
 public:
  DetectionList();
  virtual ~DetectionList();

  DetectionList(const DetectionList& from);
  DetectionList(DetectionList&& from) noexcept
    : DetectionList() {
    *this = ::std::move(from);
  }

  inline DetectionList& operator=(const DetectionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionList& operator=(DetectionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionList* internal_default_instance() {
    return reinterpret_cast<const DetectionList*>(
               &_DetectionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectionList& a, DetectionList& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionList* New() const final {
    return CreateMaybeMessage<DetectionList>(nullptr);
  }

  DetectionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionList& from);
  void MergeFrom(const DetectionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.DetectionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionFieldNumber = 1,
  };
  // repeated .mediapipe.Detection detection = 1;
  int detection_size() const;
  private:
  int _internal_detection_size() const;
  public:
  void clear_detection();
  ::mediapipe::Detection* mutable_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >*
      mutable_detection();
  private:
  const ::mediapipe::Detection& _internal_detection(int index) const;
  ::mediapipe::Detection* _internal_add_detection();
  public:
  const ::mediapipe::Detection& detection(int index) const;
  ::mediapipe::Detection* add_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >&
      detection() const;

  // @@protoc_insertion_point(class_scope:mediapipe.DetectionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection > detection_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Detection_AssociatedDetection

// optional int32 id = 1;
inline bool Detection_AssociatedDetection::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detection_AssociatedDetection::has_id() const {
  return _internal_has_id();
}
inline void Detection_AssociatedDetection::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection_AssociatedDetection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection_AssociatedDetection::id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.AssociatedDetection.id)
  return _internal_id();
}
inline void Detection_AssociatedDetection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Detection_AssociatedDetection::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.AssociatedDetection.id)
}

// optional float confidence = 2;
inline bool Detection_AssociatedDetection::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detection_AssociatedDetection::has_confidence() const {
  return _internal_has_confidence();
}
inline void Detection_AssociatedDetection::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Detection_AssociatedDetection::_internal_confidence() const {
  return confidence_;
}
inline float Detection_AssociatedDetection::confidence() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.AssociatedDetection.confidence)
  return _internal_confidence();
}
inline void Detection_AssociatedDetection::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Detection_AssociatedDetection::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.AssociatedDetection.confidence)
}

// -------------------------------------------------------------------

// Detection

// repeated string label = 1;
inline int Detection::_internal_label_size() const {
  return label_.size();
}
inline int Detection::label_size() const {
  return _internal_label_size();
}
inline void Detection::clear_label() {
  label_.Clear();
}
inline std::string* Detection::add_label() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.Detection.label)
  return _internal_add_label();
}
inline const std::string& Detection::_internal_label(int index) const {
  return label_.Get(index);
}
inline const std::string& Detection::label(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.label)
  return _internal_label(index);
}
inline std::string* Detection::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.label)
  return label_.Mutable(index);
}
inline void Detection::set_label(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label)
  label_.Mutable(index)->assign(value);
}
inline void Detection::set_label(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label)
  label_.Mutable(index)->assign(std::move(value));
}
inline void Detection::set_label(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.label)
}
inline void Detection::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.label)
}
inline std::string* Detection::_internal_add_label() {
  return label_.Add();
}
inline void Detection::add_label(const std::string& value) {
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label)
}
inline void Detection::add_label(std::string&& value) {
  label_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label)
}
inline void Detection::add_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.Detection.label)
}
inline void Detection::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.Detection.label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detection::label() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.label)
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detection::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.label)
  return &label_;
}

// repeated int32 label_id = 2 [packed = true];
inline int Detection::_internal_label_id_size() const {
  return label_id_.size();
}
inline int Detection::label_id_size() const {
  return _internal_label_id_size();
}
inline void Detection::clear_label_id() {
  label_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection::_internal_label_id(int index) const {
  return label_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detection::label_id(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.label_id)
  return _internal_label_id(index);
}
inline void Detection::set_label_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  label_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.label_id)
}
inline void Detection::_internal_add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  label_id_.Add(value);
}
inline void Detection::add_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_label_id(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.label_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Detection::_internal_label_id() const {
  return label_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Detection::label_id() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.label_id)
  return _internal_label_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Detection::_internal_mutable_label_id() {
  return &label_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Detection::mutable_label_id() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.label_id)
  return _internal_mutable_label_id();
}

// repeated float score = 3 [packed = true];
inline int Detection::_internal_score_size() const {
  return score_.size();
}
inline int Detection::score_size() const {
  return _internal_score_size();
}
inline void Detection::clear_score() {
  score_.Clear();
}
inline float Detection::_internal_score(int index) const {
  return score_.Get(index);
}
inline float Detection::score(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.score)
  return _internal_score(index);
}
inline void Detection::set_score(int index, float value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.score)
}
inline void Detection::_internal_add_score(float value) {
  score_.Add(value);
}
inline void Detection::add_score(float value) {
  _internal_add_score(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detection::_internal_score() const {
  return score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detection::score() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.score)
  return _internal_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detection::_internal_mutable_score() {
  return &score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detection::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.score)
  return _internal_mutable_score();
}

// optional .mediapipe.LocationData location_data = 4;
inline bool Detection::_internal_has_location_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || location_data_ != nullptr);
  return value;
}
inline bool Detection::has_location_data() const {
  return _internal_has_location_data();
}
inline const ::mediapipe::LocationData& Detection::_internal_location_data() const {
  const ::mediapipe::LocationData* p = location_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::LocationData*>(
      &::mediapipe::_LocationData_default_instance_);
}
inline const ::mediapipe::LocationData& Detection::location_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.location_data)
  return _internal_location_data();
}
inline ::mediapipe::LocationData* Detection::release_location_data() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.location_data)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::LocationData* temp = location_data_;
  location_data_ = nullptr;
  return temp;
}
inline ::mediapipe::LocationData* Detection::_internal_mutable_location_data() {
  _has_bits_[0] |= 0x00000004u;
  if (location_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LocationData>(GetArenaNoVirtual());
    location_data_ = p;
  }
  return location_data_;
}
inline ::mediapipe::LocationData* Detection::mutable_location_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.location_data)
  return _internal_mutable_location_data();
}
inline void Detection::set_allocated_location_data(::mediapipe::LocationData* location_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_data_);
  }
  if (location_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  location_data_ = location_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.location_data)
}

// optional string feature_tag = 5;
inline bool Detection::_internal_has_feature_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detection::has_feature_tag() const {
  return _internal_has_feature_tag();
}
inline void Detection::clear_feature_tag() {
  feature_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Detection::feature_tag() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.feature_tag)
  return _internal_feature_tag();
}
inline void Detection::set_feature_tag(const std::string& value) {
  _internal_set_feature_tag(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.feature_tag)
}
inline std::string* Detection::mutable_feature_tag() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.feature_tag)
  return _internal_mutable_feature_tag();
}
inline const std::string& Detection::_internal_feature_tag() const {
  return feature_tag_.GetNoArena();
}
inline void Detection::_internal_set_feature_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Detection::set_feature_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.Detection.feature_tag)
}
inline void Detection::set_feature_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.feature_tag)
}
inline void Detection::set_feature_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  feature_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.feature_tag)
}
inline std::string* Detection::_internal_mutable_feature_tag() {
  _has_bits_[0] |= 0x00000001u;
  return feature_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detection::release_feature_tag() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.feature_tag)
  if (!_internal_has_feature_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return feature_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detection::set_allocated_feature_tag(std::string* feature_tag) {
  if (feature_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feature_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_tag);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.feature_tag)
}

// optional string track_id = 6;
inline bool Detection::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detection::has_track_id() const {
  return _internal_has_track_id();
}
inline void Detection::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Detection::track_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.track_id)
  return _internal_track_id();
}
inline void Detection::set_track_id(const std::string& value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.track_id)
}
inline std::string* Detection::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.track_id)
  return _internal_mutable_track_id();
}
inline const std::string& Detection::_internal_track_id() const {
  return track_id_.GetNoArena();
}
inline void Detection::_internal_set_track_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Detection::set_track_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.Detection.track_id)
}
inline void Detection::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.track_id)
}
inline void Detection::set_track_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.track_id)
}
inline std::string* Detection::_internal_mutable_track_id() {
  _has_bits_[0] |= 0x00000002u;
  return track_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detection::release_track_id() {
  // @@protoc_insertion_point(field_release:mediapipe.Detection.track_id)
  if (!_internal_has_track_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return track_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detection::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  track_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Detection.track_id)
}

// optional int64 detection_id = 7;
inline bool Detection::_internal_has_detection_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Detection::has_detection_id() const {
  return _internal_has_detection_id();
}
inline void Detection::clear_detection_id() {
  detection_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::_internal_detection_id() const {
  return detection_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::detection_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.detection_id)
  return _internal_detection_id();
}
inline void Detection::_internal_set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  detection_id_ = value;
}
inline void Detection::set_detection_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_detection_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.detection_id)
}

// repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
inline int Detection::_internal_associated_detections_size() const {
  return associated_detections_.size();
}
inline int Detection::associated_detections_size() const {
  return _internal_associated_detections_size();
}
inline void Detection::clear_associated_detections() {
  associated_detections_.Clear();
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::mutable_associated_detections(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.associated_detections)
  return associated_detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >*
Detection::mutable_associated_detections() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.associated_detections)
  return &associated_detections_;
}
inline const ::mediapipe::Detection_AssociatedDetection& Detection::_internal_associated_detections(int index) const {
  return associated_detections_.Get(index);
}
inline const ::mediapipe::Detection_AssociatedDetection& Detection::associated_detections(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.associated_detections)
  return _internal_associated_detections(index);
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::_internal_add_associated_detections() {
  return associated_detections_.Add();
}
inline ::mediapipe::Detection_AssociatedDetection* Detection::add_associated_detections() {
  // @@protoc_insertion_point(field_add:mediapipe.Detection.associated_detections)
  return _internal_add_associated_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection_AssociatedDetection >&
Detection::associated_detections() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.associated_detections)
  return associated_detections_;
}

// repeated string display_name = 9;
inline int Detection::_internal_display_name_size() const {
  return display_name_.size();
}
inline int Detection::display_name_size() const {
  return _internal_display_name_size();
}
inline void Detection::clear_display_name() {
  display_name_.Clear();
}
inline std::string* Detection::add_display_name() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.Detection.display_name)
  return _internal_add_display_name();
}
inline const std::string& Detection::_internal_display_name(int index) const {
  return display_name_.Get(index);
}
inline const std::string& Detection::display_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.display_name)
  return _internal_display_name(index);
}
inline std::string* Detection::mutable_display_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Detection.display_name)
  return display_name_.Mutable(index);
}
inline void Detection::set_display_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.display_name)
  display_name_.Mutable(index)->assign(value);
}
inline void Detection::set_display_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.Detection.display_name)
  display_name_.Mutable(index)->assign(std::move(value));
}
inline void Detection::set_display_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  display_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.Detection.display_name)
}
inline void Detection::set_display_name(int index, const char* value, size_t size) {
  display_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.Detection.display_name)
}
inline std::string* Detection::_internal_add_display_name() {
  return display_name_.Add();
}
inline void Detection::add_display_name(const std::string& value) {
  display_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(std::string&& value) {
  display_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  display_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.Detection.display_name)
}
inline void Detection::add_display_name(const char* value, size_t size) {
  display_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.Detection.display_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detection::display_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.Detection.display_name)
  return display_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detection::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Detection.display_name)
  return &display_name_;
}

// optional int64 timestamp_usec = 10;
inline bool Detection::_internal_has_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Detection::has_timestamp_usec() const {
  return _internal_has_timestamp_usec();
}
inline void Detection::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::_internal_timestamp_usec() const {
  return timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Detection::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.Detection.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void Detection::_internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_usec_ = value;
}
inline void Detection::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.Detection.timestamp_usec)
}

// -------------------------------------------------------------------

// DetectionList

// repeated .mediapipe.Detection detection = 1;
inline int DetectionList::_internal_detection_size() const {
  return detection_.size();
}
inline int DetectionList::detection_size() const {
  return _internal_detection_size();
}
inline void DetectionList::clear_detection() {
  detection_.Clear();
}
inline ::mediapipe::Detection* DetectionList::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.DetectionList.detection)
  return detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >*
DetectionList::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.DetectionList.detection)
  return &detection_;
}
inline const ::mediapipe::Detection& DetectionList::_internal_detection(int index) const {
  return detection_.Get(index);
}
inline const ::mediapipe::Detection& DetectionList::detection(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.DetectionList.detection)
  return _internal_detection(index);
}
inline ::mediapipe::Detection* DetectionList::_internal_add_detection() {
  return detection_.Add();
}
inline ::mediapipe::Detection* DetectionList::add_detection() {
  // @@protoc_insertion_point(field_add:mediapipe.DetectionList.detection)
  return _internal_add_detection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Detection >&
DetectionList::detection() const {
  // @@protoc_insertion_point(field_list:mediapipe.DetectionList.detection)
  return detection_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fdetection_2eproto
