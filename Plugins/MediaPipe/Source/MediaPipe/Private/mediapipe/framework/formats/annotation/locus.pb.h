// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/annotation/locus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/formats/annotation/rasterization.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto;
namespace mediapipe {
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Locus;
class LocusDefaultTypeInternal;
extern LocusDefaultTypeInternal _Locus_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::BoundingBox* Arena::CreateMaybeMessage<::mediapipe::BoundingBox>(Arena*);
template<> ::mediapipe::Locus* Arena::CreateMaybeMessage<::mediapipe::Locus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum Locus_LocusType : int {
  Locus_LocusType_GLOBAL = 1,
  Locus_LocusType_BOUNDING_BOX = 2,
  Locus_LocusType_REGION = 3,
  Locus_LocusType_VIDEO_TUBE = 4
};
bool Locus_LocusType_IsValid(int value);
constexpr Locus_LocusType Locus_LocusType_LocusType_MIN = Locus_LocusType_GLOBAL;
constexpr Locus_LocusType Locus_LocusType_LocusType_MAX = Locus_LocusType_VIDEO_TUBE;
constexpr int Locus_LocusType_LocusType_ARRAYSIZE = Locus_LocusType_LocusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Locus_LocusType_descriptor();
template<typename T>
inline const std::string& Locus_LocusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Locus_LocusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Locus_LocusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Locus_LocusType_descriptor(), enum_t_value);
}
inline bool Locus_LocusType_Parse(
    const std::string& name, Locus_LocusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Locus_LocusType>(
    Locus_LocusType_descriptor(), name, value);
}
// ===================================================================

class Locus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Locus) */ {
 public:
  Locus();
  virtual ~Locus();

  Locus(const Locus& from);
  Locus(Locus&& from) noexcept
    : Locus() {
    *this = ::std::move(from);
  }

  inline Locus& operator=(const Locus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Locus& operator=(Locus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Locus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Locus* internal_default_instance() {
    return reinterpret_cast<const Locus*>(
               &_Locus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Locus& a, Locus& b) {
    a.Swap(&b);
  }
  inline void Swap(Locus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Locus* New() const final {
    return CreateMaybeMessage<Locus>(nullptr);
  }

  Locus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Locus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Locus& from);
  void MergeFrom(const Locus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Locus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Locus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Locus_LocusType LocusType;
  static constexpr LocusType GLOBAL =
    Locus_LocusType_GLOBAL;
  static constexpr LocusType BOUNDING_BOX =
    Locus_LocusType_BOUNDING_BOX;
  static constexpr LocusType REGION =
    Locus_LocusType_REGION;
  static constexpr LocusType VIDEO_TUBE =
    Locus_LocusType_VIDEO_TUBE;
  static inline bool LocusType_IsValid(int value) {
    return Locus_LocusType_IsValid(value);
  }
  static constexpr LocusType LocusType_MIN =
    Locus_LocusType_LocusType_MIN;
  static constexpr LocusType LocusType_MAX =
    Locus_LocusType_LocusType_MAX;
  static constexpr int LocusType_ARRAYSIZE =
    Locus_LocusType_LocusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LocusType_descriptor() {
    return Locus_LocusType_descriptor();
  }
  template<typename T>
  static inline const std::string& LocusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LocusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LocusType_Name.");
    return Locus_LocusType_Name(enum_t_value);
  }
  static inline bool LocusType_Parse(const std::string& name,
      LocusType* value) {
    return Locus_LocusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentLocusFieldNumber = 8,
    kBoundingBoxFieldNumber = 3,
    kRegionFieldNumber = 4,
    kLocusIdFieldNumber = 2,
    kLocusIdSeedFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kLocusTypeFieldNumber = 1,
    kConcatenatableFieldNumber = 5,
  };
  // repeated .mediapipe.Locus component_locus = 8;
  int component_locus_size() const;
  private:
  int _internal_component_locus_size() const;
  public:
  void clear_component_locus();
  ::mediapipe::Locus* mutable_component_locus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Locus >*
      mutable_component_locus();
  private:
  const ::mediapipe::Locus& _internal_component_locus(int index) const;
  ::mediapipe::Locus* _internal_add_component_locus();
  public:
  const ::mediapipe::Locus& component_locus(int index) const;
  ::mediapipe::Locus* add_component_locus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Locus >&
      component_locus() const;

  // optional .mediapipe.BoundingBox bounding_box = 3;
  bool has_bounding_box() const;
  private:
  bool _internal_has_bounding_box() const;
  public:
  void clear_bounding_box();
  const ::mediapipe::BoundingBox& bounding_box() const;
  ::mediapipe::BoundingBox* release_bounding_box();
  ::mediapipe::BoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::mediapipe::BoundingBox* bounding_box);
  private:
  const ::mediapipe::BoundingBox& _internal_bounding_box() const;
  ::mediapipe::BoundingBox* _internal_mutable_bounding_box();
  public:

  // optional .mediapipe.Rasterization region = 4;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::mediapipe::Rasterization& region() const;
  ::mediapipe::Rasterization* release_region();
  ::mediapipe::Rasterization* mutable_region();
  void set_allocated_region(::mediapipe::Rasterization* region);
  private:
  const ::mediapipe::Rasterization& _internal_region() const;
  ::mediapipe::Rasterization* _internal_mutable_region();
  public:

  // optional fixed64 locus_id = 2;
  bool has_locus_id() const;
  private:
  bool _internal_has_locus_id() const;
  public:
  void clear_locus_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 locus_id() const;
  void set_locus_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_locus_id() const;
  void _internal_set_locus_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 locus_id_seed = 6;
  bool has_locus_id_seed() const;
  private:
  bool _internal_has_locus_id_seed() const;
  public:
  void clear_locus_id_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 locus_id_seed() const;
  void set_locus_id_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_locus_id_seed() const;
  void _internal_set_locus_id_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 timestamp = 7 [default = -1];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.Locus.LocusType locus_type = 1;
  bool has_locus_type() const;
  private:
  bool _internal_has_locus_type() const;
  public:
  void clear_locus_type();
  ::mediapipe::Locus_LocusType locus_type() const;
  void set_locus_type(::mediapipe::Locus_LocusType value);
  private:
  ::mediapipe::Locus_LocusType _internal_locus_type() const;
  void _internal_set_locus_type(::mediapipe::Locus_LocusType value);
  public:

  // optional bool concatenatable = 5 [default = true];
  bool has_concatenatable() const;
  private:
  bool _internal_has_concatenatable() const;
  public:
  void clear_concatenatable();
  bool concatenatable() const;
  void set_concatenatable(bool value);
  private:
  bool _internal_concatenatable() const;
  void _internal_set_concatenatable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Locus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Locus > component_locus_;
  ::mediapipe::BoundingBox* bounding_box_;
  ::mediapipe::Rasterization* region_;
  ::PROTOBUF_NAMESPACE_ID::uint64 locus_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 locus_id_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  int locus_type_;
  bool concatenatable_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoundingBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftXFieldNumber = 1,
    kUpperYFieldNumber = 2,
    kRightXFieldNumber = 3,
    kLowerYFieldNumber = 4,
  };
  // optional int32 left_x = 1;
  bool has_left_x() const;
  private:
  bool _internal_has_left_x() const;
  public:
  void clear_left_x();
  ::PROTOBUF_NAMESPACE_ID::int32 left_x() const;
  void set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_x() const;
  void _internal_set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 upper_y = 2;
  bool has_upper_y() const;
  private:
  bool _internal_has_upper_y() const;
  public:
  void clear_upper_y();
  ::PROTOBUF_NAMESPACE_ID::int32 upper_y() const;
  void set_upper_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upper_y() const;
  void _internal_set_upper_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 right_x = 3;
  bool has_right_x() const;
  private:
  bool _internal_has_right_x() const;
  public:
  void clear_right_x();
  ::PROTOBUF_NAMESPACE_ID::int32 right_x() const;
  void set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_x() const;
  void _internal_set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lower_y = 4;
  bool has_lower_y() const;
  private:
  bool _internal_has_lower_y() const;
  public:
  void clear_lower_y();
  ::PROTOBUF_NAMESPACE_ID::int32 lower_y() const;
  void set_lower_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lower_y() const;
  void _internal_set_lower_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.BoundingBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 upper_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 lower_y_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Locus

// optional .mediapipe.Locus.LocusType locus_type = 1;
inline bool Locus::_internal_has_locus_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Locus::has_locus_type() const {
  return _internal_has_locus_type();
}
inline void Locus::clear_locus_type() {
  locus_type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::mediapipe::Locus_LocusType Locus::_internal_locus_type() const {
  return static_cast< ::mediapipe::Locus_LocusType >(locus_type_);
}
inline ::mediapipe::Locus_LocusType Locus::locus_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.locus_type)
  return _internal_locus_type();
}
inline void Locus::_internal_set_locus_type(::mediapipe::Locus_LocusType value) {
  assert(::mediapipe::Locus_LocusType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  locus_type_ = value;
}
inline void Locus::set_locus_type(::mediapipe::Locus_LocusType value) {
  _internal_set_locus_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.Locus.locus_type)
}

// optional fixed64 locus_id = 2;
inline bool Locus::_internal_has_locus_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Locus::has_locus_id() const {
  return _internal_has_locus_id();
}
inline void Locus::clear_locus_id() {
  locus_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Locus::_internal_locus_id() const {
  return locus_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Locus::locus_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.locus_id)
  return _internal_locus_id();
}
inline void Locus::_internal_set_locus_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  locus_id_ = value;
}
inline void Locus::set_locus_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_locus_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Locus.locus_id)
}

// optional fixed64 locus_id_seed = 6;
inline bool Locus::_internal_has_locus_id_seed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Locus::has_locus_id_seed() const {
  return _internal_has_locus_id_seed();
}
inline void Locus::clear_locus_id_seed() {
  locus_id_seed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Locus::_internal_locus_id_seed() const {
  return locus_id_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Locus::locus_id_seed() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.locus_id_seed)
  return _internal_locus_id_seed();
}
inline void Locus::_internal_set_locus_id_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  locus_id_seed_ = value;
}
inline void Locus::set_locus_id_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_locus_id_seed(value);
  // @@protoc_insertion_point(field_set:mediapipe.Locus.locus_id_seed)
}

// optional bool concatenatable = 5 [default = true];
inline bool Locus::_internal_has_concatenatable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Locus::has_concatenatable() const {
  return _internal_has_concatenatable();
}
inline void Locus::clear_concatenatable() {
  concatenatable_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Locus::_internal_concatenatable() const {
  return concatenatable_;
}
inline bool Locus::concatenatable() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.concatenatable)
  return _internal_concatenatable();
}
inline void Locus::_internal_set_concatenatable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  concatenatable_ = value;
}
inline void Locus::set_concatenatable(bool value) {
  _internal_set_concatenatable(value);
  // @@protoc_insertion_point(field_set:mediapipe.Locus.concatenatable)
}

// optional .mediapipe.BoundingBox bounding_box = 3;
inline bool Locus::_internal_has_bounding_box() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bounding_box_ != nullptr);
  return value;
}
inline bool Locus::has_bounding_box() const {
  return _internal_has_bounding_box();
}
inline void Locus::clear_bounding_box() {
  if (bounding_box_ != nullptr) bounding_box_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::BoundingBox& Locus::_internal_bounding_box() const {
  const ::mediapipe::BoundingBox* p = bounding_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::BoundingBox*>(
      &::mediapipe::_BoundingBox_default_instance_);
}
inline const ::mediapipe::BoundingBox& Locus::bounding_box() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.bounding_box)
  return _internal_bounding_box();
}
inline ::mediapipe::BoundingBox* Locus::release_bounding_box() {
  // @@protoc_insertion_point(field_release:mediapipe.Locus.bounding_box)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::BoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::mediapipe::BoundingBox* Locus::_internal_mutable_bounding_box() {
  _has_bits_[0] |= 0x00000001u;
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::BoundingBox>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  return bounding_box_;
}
inline ::mediapipe::BoundingBox* Locus::mutable_bounding_box() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Locus.bounding_box)
  return _internal_mutable_bounding_box();
}
inline void Locus::set_allocated_bounding_box(::mediapipe::BoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Locus.bounding_box)
}

// optional int32 timestamp = 7 [default = -1];
inline bool Locus::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Locus::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Locus::clear_timestamp() {
  timestamp_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Locus::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Locus::timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.timestamp)
  return _internal_timestamp();
}
inline void Locus::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void Locus::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.Locus.timestamp)
}

// optional .mediapipe.Rasterization region = 4;
inline bool Locus::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || region_ != nullptr);
  return value;
}
inline bool Locus::has_region() const {
  return _internal_has_region();
}
inline const ::mediapipe::Rasterization& Locus::_internal_region() const {
  const ::mediapipe::Rasterization* p = region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::Rasterization*>(
      &::mediapipe::_Rasterization_default_instance_);
}
inline const ::mediapipe::Rasterization& Locus::region() const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.region)
  return _internal_region();
}
inline ::mediapipe::Rasterization* Locus::release_region() {
  // @@protoc_insertion_point(field_release:mediapipe.Locus.region)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::Rasterization* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::mediapipe::Rasterization* Locus::_internal_mutable_region() {
  _has_bits_[0] |= 0x00000002u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Rasterization>(GetArenaNoVirtual());
    region_ = p;
  }
  return region_;
}
inline ::mediapipe::Rasterization* Locus::mutable_region() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Locus.region)
  return _internal_mutable_region();
}
inline void Locus::set_allocated_region(::mediapipe::Rasterization* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Locus.region)
}

// repeated .mediapipe.Locus component_locus = 8;
inline int Locus::_internal_component_locus_size() const {
  return component_locus_.size();
}
inline int Locus::component_locus_size() const {
  return _internal_component_locus_size();
}
inline void Locus::clear_component_locus() {
  component_locus_.Clear();
}
inline ::mediapipe::Locus* Locus::mutable_component_locus(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Locus.component_locus)
  return component_locus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Locus >*
Locus::mutable_component_locus() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Locus.component_locus)
  return &component_locus_;
}
inline const ::mediapipe::Locus& Locus::_internal_component_locus(int index) const {
  return component_locus_.Get(index);
}
inline const ::mediapipe::Locus& Locus::component_locus(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Locus.component_locus)
  return _internal_component_locus(index);
}
inline ::mediapipe::Locus* Locus::_internal_add_component_locus() {
  return component_locus_.Add();
}
inline ::mediapipe::Locus* Locus::add_component_locus() {
  // @@protoc_insertion_point(field_add:mediapipe.Locus.component_locus)
  return _internal_add_component_locus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Locus >&
Locus::component_locus() const {
  // @@protoc_insertion_point(field_list:mediapipe.Locus.component_locus)
  return component_locus_;
}

// -------------------------------------------------------------------

// BoundingBox

// optional int32 left_x = 1;
inline bool BoundingBox::_internal_has_left_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoundingBox::has_left_x() const {
  return _internal_has_left_x();
}
inline void BoundingBox::clear_left_x() {
  left_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::_internal_left_x() const {
  return left_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::left_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoundingBox.left_x)
  return _internal_left_x();
}
inline void BoundingBox::_internal_set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  left_x_ = value;
}
inline void BoundingBox::set_left_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoundingBox.left_x)
}

// optional int32 upper_y = 2;
inline bool BoundingBox::_internal_has_upper_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundingBox::has_upper_y() const {
  return _internal_has_upper_y();
}
inline void BoundingBox::clear_upper_y() {
  upper_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::_internal_upper_y() const {
  return upper_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::upper_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoundingBox.upper_y)
  return _internal_upper_y();
}
inline void BoundingBox::_internal_set_upper_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  upper_y_ = value;
}
inline void BoundingBox::set_upper_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upper_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoundingBox.upper_y)
}

// optional int32 right_x = 3;
inline bool BoundingBox::_internal_has_right_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundingBox::has_right_x() const {
  return _internal_has_right_x();
}
inline void BoundingBox::clear_right_x() {
  right_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::_internal_right_x() const {
  return right_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::right_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoundingBox.right_x)
  return _internal_right_x();
}
inline void BoundingBox::_internal_set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  right_x_ = value;
}
inline void BoundingBox::set_right_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoundingBox.right_x)
}

// optional int32 lower_y = 4;
inline bool BoundingBox::_internal_has_lower_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoundingBox::has_lower_y() const {
  return _internal_has_lower_y();
}
inline void BoundingBox::clear_lower_y() {
  lower_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::_internal_lower_y() const {
  return lower_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundingBox::lower_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoundingBox.lower_y)
  return _internal_lower_y();
}
inline void BoundingBox::_internal_set_lower_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lower_y_ = value;
}
inline void BoundingBox::set_lower_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lower_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoundingBox.lower_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::Locus_LocusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::Locus_LocusType>() {
  return ::mediapipe::Locus_LocusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fannotation_2flocus_2eproto
