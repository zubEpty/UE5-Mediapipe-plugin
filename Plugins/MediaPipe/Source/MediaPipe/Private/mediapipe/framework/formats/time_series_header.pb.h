// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/time_series_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto;
namespace mediapipe {
class MultiStreamTimeSeriesHeader;
class MultiStreamTimeSeriesHeaderDefaultTypeInternal;
extern MultiStreamTimeSeriesHeaderDefaultTypeInternal _MultiStreamTimeSeriesHeader_default_instance_;
class TimeSeriesHeader;
class TimeSeriesHeaderDefaultTypeInternal;
extern TimeSeriesHeaderDefaultTypeInternal _TimeSeriesHeader_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::MultiStreamTimeSeriesHeader* Arena::CreateMaybeMessage<::mediapipe::MultiStreamTimeSeriesHeader>(Arena*);
template<> ::mediapipe::TimeSeriesHeader* Arena::CreateMaybeMessage<::mediapipe::TimeSeriesHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class TimeSeriesHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TimeSeriesHeader) */ {
 public:
  TimeSeriesHeader();
  virtual ~TimeSeriesHeader();

  TimeSeriesHeader(const TimeSeriesHeader& from);
  TimeSeriesHeader(TimeSeriesHeader&& from) noexcept
    : TimeSeriesHeader() {
    *this = ::std::move(from);
  }

  inline TimeSeriesHeader& operator=(const TimeSeriesHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesHeader& operator=(TimeSeriesHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSeriesHeader* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesHeader*>(
               &_TimeSeriesHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSeriesHeader& a, TimeSeriesHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesHeader* New() const final {
    return CreateMaybeMessage<TimeSeriesHeader>(nullptr);
  }

  TimeSeriesHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesHeader& from);
  void MergeFrom(const TimeSeriesHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TimeSeriesHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kNumSamplesFieldNumber = 3,
    kPacketRateFieldNumber = 4,
    kAudioSampleRateFieldNumber = 5,
  };
  // optional double sample_rate = 1;
  bool has_sample_rate() const;
  private:
  bool _internal_has_sample_rate() const;
  public:
  void clear_sample_rate();
  double sample_rate() const;
  void set_sample_rate(double value);
  private:
  double _internal_sample_rate() const;
  void _internal_set_sample_rate(double value);
  public:

  // optional int32 num_channels = 2;
  bool has_num_channels() const;
  private:
  bool _internal_has_num_channels() const;
  public:
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_channels() const;
  void _internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_samples = 3;
  bool has_num_samples() const;
  private:
  bool _internal_has_num_samples() const;
  public:
  void clear_num_samples();
  ::PROTOBUF_NAMESPACE_ID::int32 num_samples() const;
  void set_num_samples(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_samples() const;
  void _internal_set_num_samples(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double packet_rate = 4;
  bool has_packet_rate() const;
  private:
  bool _internal_has_packet_rate() const;
  public:
  void clear_packet_rate();
  double packet_rate() const;
  void set_packet_rate(double value);
  private:
  double _internal_packet_rate() const;
  void _internal_set_packet_rate(double value);
  public:

  // optional double audio_sample_rate = 5;
  bool has_audio_sample_rate() const;
  private:
  bool _internal_has_audio_sample_rate() const;
  public:
  void clear_audio_sample_rate();
  double audio_sample_rate() const;
  void set_audio_sample_rate(double value);
  private:
  double _internal_audio_sample_rate() const;
  void _internal_set_audio_sample_rate(double value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TimeSeriesHeader)
  // @@protoc_insertion_point(class_scope:mediapipe.TimeSeriesHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_samples_;
  double packet_rate_;
  double audio_sample_rate_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto;
};
// -------------------------------------------------------------------

class MultiStreamTimeSeriesHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MultiStreamTimeSeriesHeader) */ {
 public:
  MultiStreamTimeSeriesHeader();
  virtual ~MultiStreamTimeSeriesHeader();

  MultiStreamTimeSeriesHeader(const MultiStreamTimeSeriesHeader& from);
  MultiStreamTimeSeriesHeader(MultiStreamTimeSeriesHeader&& from) noexcept
    : MultiStreamTimeSeriesHeader() {
    *this = ::std::move(from);
  }

  inline MultiStreamTimeSeriesHeader& operator=(const MultiStreamTimeSeriesHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStreamTimeSeriesHeader& operator=(MultiStreamTimeSeriesHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiStreamTimeSeriesHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiStreamTimeSeriesHeader* internal_default_instance() {
    return reinterpret_cast<const MultiStreamTimeSeriesHeader*>(
               &_MultiStreamTimeSeriesHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiStreamTimeSeriesHeader& a, MultiStreamTimeSeriesHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStreamTimeSeriesHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiStreamTimeSeriesHeader* New() const final {
    return CreateMaybeMessage<MultiStreamTimeSeriesHeader>(nullptr);
  }

  MultiStreamTimeSeriesHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiStreamTimeSeriesHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiStreamTimeSeriesHeader& from);
  void MergeFrom(const MultiStreamTimeSeriesHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStreamTimeSeriesHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MultiStreamTimeSeriesHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSeriesHeaderFieldNumber = 1,
    kNumStreamsFieldNumber = 2,
  };
  // optional .mediapipe.TimeSeriesHeader time_series_header = 1;
  bool has_time_series_header() const;
  private:
  bool _internal_has_time_series_header() const;
  public:
  void clear_time_series_header();
  const ::mediapipe::TimeSeriesHeader& time_series_header() const;
  ::mediapipe::TimeSeriesHeader* release_time_series_header();
  ::mediapipe::TimeSeriesHeader* mutable_time_series_header();
  void set_allocated_time_series_header(::mediapipe::TimeSeriesHeader* time_series_header);
  private:
  const ::mediapipe::TimeSeriesHeader& _internal_time_series_header() const;
  ::mediapipe::TimeSeriesHeader* _internal_mutable_time_series_header();
  public:

  // optional int32 num_streams = 2;
  bool has_num_streams() const;
  private:
  bool _internal_has_num_streams() const;
  public:
  void clear_num_streams();
  ::PROTOBUF_NAMESPACE_ID::int32 num_streams() const;
  void set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_streams() const;
  void _internal_set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MultiStreamTimeSeriesHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::TimeSeriesHeader* time_series_header_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_streams_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSeriesHeader

// optional double sample_rate = 1;
inline bool TimeSeriesHeader::_internal_has_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeSeriesHeader::has_sample_rate() const {
  return _internal_has_sample_rate();
}
inline void TimeSeriesHeader::clear_sample_rate() {
  sample_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double TimeSeriesHeader::_internal_sample_rate() const {
  return sample_rate_;
}
inline double TimeSeriesHeader::sample_rate() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeSeriesHeader.sample_rate)
  return _internal_sample_rate();
}
inline void TimeSeriesHeader::_internal_set_sample_rate(double value) {
  _has_bits_[0] |= 0x00000001u;
  sample_rate_ = value;
}
inline void TimeSeriesHeader::set_sample_rate(double value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeSeriesHeader.sample_rate)
}

// optional int32 num_channels = 2;
inline bool TimeSeriesHeader::_internal_has_num_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeSeriesHeader::has_num_channels() const {
  return _internal_has_num_channels();
}
inline void TimeSeriesHeader::clear_num_channels() {
  num_channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSeriesHeader::_internal_num_channels() const {
  return num_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSeriesHeader::num_channels() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeSeriesHeader.num_channels)
  return _internal_num_channels();
}
inline void TimeSeriesHeader::_internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_channels_ = value;
}
inline void TimeSeriesHeader::set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeSeriesHeader.num_channels)
}

// optional int32 num_samples = 3;
inline bool TimeSeriesHeader::_internal_has_num_samples() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeSeriesHeader::has_num_samples() const {
  return _internal_has_num_samples();
}
inline void TimeSeriesHeader::clear_num_samples() {
  num_samples_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSeriesHeader::_internal_num_samples() const {
  return num_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSeriesHeader::num_samples() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeSeriesHeader.num_samples)
  return _internal_num_samples();
}
inline void TimeSeriesHeader::_internal_set_num_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_samples_ = value;
}
inline void TimeSeriesHeader::set_num_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_samples(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeSeriesHeader.num_samples)
}

// optional double packet_rate = 4;
inline bool TimeSeriesHeader::_internal_has_packet_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeSeriesHeader::has_packet_rate() const {
  return _internal_has_packet_rate();
}
inline void TimeSeriesHeader::clear_packet_rate() {
  packet_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TimeSeriesHeader::_internal_packet_rate() const {
  return packet_rate_;
}
inline double TimeSeriesHeader::packet_rate() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeSeriesHeader.packet_rate)
  return _internal_packet_rate();
}
inline void TimeSeriesHeader::_internal_set_packet_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  packet_rate_ = value;
}
inline void TimeSeriesHeader::set_packet_rate(double value) {
  _internal_set_packet_rate(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeSeriesHeader.packet_rate)
}

// optional double audio_sample_rate = 5;
inline bool TimeSeriesHeader::_internal_has_audio_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TimeSeriesHeader::has_audio_sample_rate() const {
  return _internal_has_audio_sample_rate();
}
inline void TimeSeriesHeader::clear_audio_sample_rate() {
  audio_sample_rate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TimeSeriesHeader::_internal_audio_sample_rate() const {
  return audio_sample_rate_;
}
inline double TimeSeriesHeader::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeSeriesHeader.audio_sample_rate)
  return _internal_audio_sample_rate();
}
inline void TimeSeriesHeader::_internal_set_audio_sample_rate(double value) {
  _has_bits_[0] |= 0x00000010u;
  audio_sample_rate_ = value;
}
inline void TimeSeriesHeader::set_audio_sample_rate(double value) {
  _internal_set_audio_sample_rate(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeSeriesHeader.audio_sample_rate)
}

// -------------------------------------------------------------------

// MultiStreamTimeSeriesHeader

// optional .mediapipe.TimeSeriesHeader time_series_header = 1;
inline bool MultiStreamTimeSeriesHeader::_internal_has_time_series_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || time_series_header_ != nullptr);
  return value;
}
inline bool MultiStreamTimeSeriesHeader::has_time_series_header() const {
  return _internal_has_time_series_header();
}
inline void MultiStreamTimeSeriesHeader::clear_time_series_header() {
  if (time_series_header_ != nullptr) time_series_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TimeSeriesHeader& MultiStreamTimeSeriesHeader::_internal_time_series_header() const {
  const ::mediapipe::TimeSeriesHeader* p = time_series_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::TimeSeriesHeader*>(
      &::mediapipe::_TimeSeriesHeader_default_instance_);
}
inline const ::mediapipe::TimeSeriesHeader& MultiStreamTimeSeriesHeader::time_series_header() const {
  // @@protoc_insertion_point(field_get:mediapipe.MultiStreamTimeSeriesHeader.time_series_header)
  return _internal_time_series_header();
}
inline ::mediapipe::TimeSeriesHeader* MultiStreamTimeSeriesHeader::release_time_series_header() {
  // @@protoc_insertion_point(field_release:mediapipe.MultiStreamTimeSeriesHeader.time_series_header)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TimeSeriesHeader* temp = time_series_header_;
  time_series_header_ = nullptr;
  return temp;
}
inline ::mediapipe::TimeSeriesHeader* MultiStreamTimeSeriesHeader::_internal_mutable_time_series_header() {
  _has_bits_[0] |= 0x00000001u;
  if (time_series_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimeSeriesHeader>(GetArenaNoVirtual());
    time_series_header_ = p;
  }
  return time_series_header_;
}
inline ::mediapipe::TimeSeriesHeader* MultiStreamTimeSeriesHeader::mutable_time_series_header() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MultiStreamTimeSeriesHeader.time_series_header)
  return _internal_mutable_time_series_header();
}
inline void MultiStreamTimeSeriesHeader::set_allocated_time_series_header(::mediapipe::TimeSeriesHeader* time_series_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_series_header_;
  }
  if (time_series_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_series_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_series_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_series_header_ = time_series_header;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MultiStreamTimeSeriesHeader.time_series_header)
}

// optional int32 num_streams = 2;
inline bool MultiStreamTimeSeriesHeader::_internal_has_num_streams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiStreamTimeSeriesHeader::has_num_streams() const {
  return _internal_has_num_streams();
}
inline void MultiStreamTimeSeriesHeader::clear_num_streams() {
  num_streams_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiStreamTimeSeriesHeader::_internal_num_streams() const {
  return num_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiStreamTimeSeriesHeader::num_streams() const {
  // @@protoc_insertion_point(field_get:mediapipe.MultiStreamTimeSeriesHeader.num_streams)
  return _internal_num_streams();
}
inline void MultiStreamTimeSeriesHeader::_internal_set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_streams_ = value;
}
inline void MultiStreamTimeSeriesHeader::set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_streams(value);
  // @@protoc_insertion_point(field_set:mediapipe.MultiStreamTimeSeriesHeader.num_streams)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2ftime_5fseries_5fheader_2eproto
