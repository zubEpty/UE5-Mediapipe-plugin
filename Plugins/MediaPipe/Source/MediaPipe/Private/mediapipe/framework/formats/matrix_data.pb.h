// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/matrix_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto;
namespace mediapipe {
class MatrixData;
class MatrixDataDefaultTypeInternal;
extern MatrixDataDefaultTypeInternal _MatrixData_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::MatrixData* Arena::CreateMaybeMessage<::mediapipe::MatrixData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum MatrixData_Layout : int {
  MatrixData_Layout_COLUMN_MAJOR = 0,
  MatrixData_Layout_ROW_MAJOR = 1
};
bool MatrixData_Layout_IsValid(int value);
constexpr MatrixData_Layout MatrixData_Layout_Layout_MIN = MatrixData_Layout_COLUMN_MAJOR;
constexpr MatrixData_Layout MatrixData_Layout_Layout_MAX = MatrixData_Layout_ROW_MAJOR;
constexpr int MatrixData_Layout_Layout_ARRAYSIZE = MatrixData_Layout_Layout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatrixData_Layout_descriptor();
template<typename T>
inline const std::string& MatrixData_Layout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatrixData_Layout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatrixData_Layout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatrixData_Layout_descriptor(), enum_t_value);
}
inline bool MatrixData_Layout_Parse(
    const std::string& name, MatrixData_Layout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatrixData_Layout>(
    MatrixData_Layout_descriptor(), name, value);
}
// ===================================================================

class MatrixData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MatrixData) */ {
 public:
  MatrixData();
  virtual ~MatrixData();

  MatrixData(const MatrixData& from);
  MatrixData(MatrixData&& from) noexcept
    : MatrixData() {
    *this = ::std::move(from);
  }

  inline MatrixData& operator=(const MatrixData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixData& operator=(MatrixData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatrixData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixData* internal_default_instance() {
    return reinterpret_cast<const MatrixData*>(
               &_MatrixData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatrixData& a, MatrixData& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatrixData* New() const final {
    return CreateMaybeMessage<MatrixData>(nullptr);
  }

  MatrixData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatrixData& from);
  void MergeFrom(const MatrixData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MatrixData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MatrixData_Layout Layout;
  static constexpr Layout COLUMN_MAJOR =
    MatrixData_Layout_COLUMN_MAJOR;
  static constexpr Layout ROW_MAJOR =
    MatrixData_Layout_ROW_MAJOR;
  static inline bool Layout_IsValid(int value) {
    return MatrixData_Layout_IsValid(value);
  }
  static constexpr Layout Layout_MIN =
    MatrixData_Layout_Layout_MIN;
  static constexpr Layout Layout_MAX =
    MatrixData_Layout_Layout_MAX;
  static constexpr int Layout_ARRAYSIZE =
    MatrixData_Layout_Layout_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Layout_descriptor() {
    return MatrixData_Layout_descriptor();
  }
  template<typename T>
  static inline const std::string& Layout_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Layout>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Layout_Name.");
    return MatrixData_Layout_Name(enum_t_value);
  }
  static inline bool Layout_Parse(const std::string& name,
      Layout* value) {
    return MatrixData_Layout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPackedDataFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
    kLayoutFieldNumber = 4,
  };
  // repeated float packed_data = 3 [packed = true];
  int packed_data_size() const;
  private:
  int _internal_packed_data_size() const;
  public:
  void clear_packed_data();
  private:
  float _internal_packed_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_packed_data() const;
  void _internal_add_packed_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_packed_data();
  public:
  float packed_data(int index) const;
  void set_packed_data(int index, float value);
  void add_packed_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      packed_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_packed_data();

  // optional int32 rows = 1;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cols = 2;
  bool has_cols() const;
  private:
  bool _internal_has_cols() const;
  public:
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.MatrixData.Layout layout = 4 [default = COLUMN_MAJOR];
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  ::mediapipe::MatrixData_Layout layout() const;
  void set_layout(::mediapipe::MatrixData_Layout value);
  private:
  ::mediapipe::MatrixData_Layout _internal_layout() const;
  void _internal_set_layout(::mediapipe::MatrixData_Layout value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MatrixData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > packed_data_;
  mutable std::atomic<int> _packed_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 cols_;
  int layout_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatrixData

// optional int32 rows = 1;
inline bool MatrixData::_internal_has_rows() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatrixData::has_rows() const {
  return _internal_has_rows();
}
inline void MatrixData::clear_rows() {
  rows_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixData::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixData::rows() const {
  // @@protoc_insertion_point(field_get:mediapipe.MatrixData.rows)
  return _internal_rows();
}
inline void MatrixData::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  rows_ = value;
}
inline void MatrixData::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:mediapipe.MatrixData.rows)
}

// optional int32 cols = 2;
inline bool MatrixData::_internal_has_cols() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatrixData::has_cols() const {
  return _internal_has_cols();
}
inline void MatrixData::clear_cols() {
  cols_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixData::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatrixData::cols() const {
  // @@protoc_insertion_point(field_get:mediapipe.MatrixData.cols)
  return _internal_cols();
}
inline void MatrixData::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cols_ = value;
}
inline void MatrixData::set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:mediapipe.MatrixData.cols)
}

// repeated float packed_data = 3 [packed = true];
inline int MatrixData::_internal_packed_data_size() const {
  return packed_data_.size();
}
inline int MatrixData::packed_data_size() const {
  return _internal_packed_data_size();
}
inline void MatrixData::clear_packed_data() {
  packed_data_.Clear();
}
inline float MatrixData::_internal_packed_data(int index) const {
  return packed_data_.Get(index);
}
inline float MatrixData::packed_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MatrixData.packed_data)
  return _internal_packed_data(index);
}
inline void MatrixData::set_packed_data(int index, float value) {
  packed_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MatrixData.packed_data)
}
inline void MatrixData::_internal_add_packed_data(float value) {
  packed_data_.Add(value);
}
inline void MatrixData::add_packed_data(float value) {
  _internal_add_packed_data(value);
  // @@protoc_insertion_point(field_add:mediapipe.MatrixData.packed_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MatrixData::_internal_packed_data() const {
  return packed_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MatrixData::packed_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.MatrixData.packed_data)
  return _internal_packed_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MatrixData::_internal_mutable_packed_data() {
  return &packed_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MatrixData::mutable_packed_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MatrixData.packed_data)
  return _internal_mutable_packed_data();
}

// optional .mediapipe.MatrixData.Layout layout = 4 [default = COLUMN_MAJOR];
inline bool MatrixData::_internal_has_layout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MatrixData::has_layout() const {
  return _internal_has_layout();
}
inline void MatrixData::clear_layout() {
  layout_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::mediapipe::MatrixData_Layout MatrixData::_internal_layout() const {
  return static_cast< ::mediapipe::MatrixData_Layout >(layout_);
}
inline ::mediapipe::MatrixData_Layout MatrixData::layout() const {
  // @@protoc_insertion_point(field_get:mediapipe.MatrixData.layout)
  return _internal_layout();
}
inline void MatrixData::_internal_set_layout(::mediapipe::MatrixData_Layout value) {
  assert(::mediapipe::MatrixData_Layout_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  layout_ = value;
}
inline void MatrixData::set_layout(::mediapipe::MatrixData_Layout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:mediapipe.MatrixData.layout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::MatrixData_Layout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MatrixData_Layout>() {
  return ::mediapipe::MatrixData_Layout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto
