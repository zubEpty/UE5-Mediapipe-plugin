// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/landmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2flandmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto;
namespace mediapipe {
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class LandmarkList;
class LandmarkListDefaultTypeInternal;
extern LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
class NormalizedLandmark;
class NormalizedLandmarkDefaultTypeInternal;
extern NormalizedLandmarkDefaultTypeInternal _NormalizedLandmark_default_instance_;
class NormalizedLandmarkList;
class NormalizedLandmarkListDefaultTypeInternal;
extern NormalizedLandmarkListDefaultTypeInternal _NormalizedLandmarkList_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::Landmark* Arena::CreateMaybeMessage<::mediapipe::Landmark>(Arena*);
template<> ::mediapipe::LandmarkList* Arena::CreateMaybeMessage<::mediapipe::LandmarkList>(Arena*);
template<> ::mediapipe::NormalizedLandmark* Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmark>(Arena*);
template<> ::mediapipe::NormalizedLandmarkList* Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class Landmark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Landmark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(nullptr);
  }

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Landmark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVisibilityFieldNumber = 4,
    kPresenceFieldNumber = 5,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float visibility = 4;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // optional float presence = 5;
  bool has_presence() const;
  private:
  bool _internal_has_presence() const;
  public:
  void clear_presence();
  float presence() const;
  void set_presence(float value);
  private:
  float _internal_presence() const;
  void _internal_set_presence(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Landmark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float visibility_;
  float presence_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
};
// -------------------------------------------------------------------

class LandmarkList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarkList) */ {
 public:
  LandmarkList();
  virtual ~LandmarkList();

  LandmarkList(const LandmarkList& from);
  LandmarkList(LandmarkList&& from) noexcept
    : LandmarkList() {
    *this = ::std::move(from);
  }

  inline LandmarkList& operator=(const LandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkList& operator=(LandmarkList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkList* internal_default_instance() {
    return reinterpret_cast<const LandmarkList*>(
               &_LandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LandmarkList& a, LandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkList* New() const final {
    return CreateMaybeMessage<LandmarkList>(nullptr);
  }

  LandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkList& from);
  void MergeFrom(const LandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LandmarkList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .mediapipe.Landmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::mediapipe::Landmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >*
      mutable_landmark();
  private:
  const ::mediapipe::Landmark& _internal_landmark(int index) const;
  ::mediapipe::Landmark* _internal_add_landmark();
  public:
  const ::mediapipe::Landmark& landmark(int index) const;
  ::mediapipe::Landmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:mediapipe.LandmarkList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark > landmark_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
};
// -------------------------------------------------------------------

class NormalizedLandmark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmark) */ {
 public:
  NormalizedLandmark();
  virtual ~NormalizedLandmark();

  NormalizedLandmark(const NormalizedLandmark& from);
  NormalizedLandmark(NormalizedLandmark&& from) noexcept
    : NormalizedLandmark() {
    *this = ::std::move(from);
  }

  inline NormalizedLandmark& operator=(const NormalizedLandmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedLandmark& operator=(NormalizedLandmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedLandmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedLandmark* internal_default_instance() {
    return reinterpret_cast<const NormalizedLandmark*>(
               &_NormalizedLandmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NormalizedLandmark& a, NormalizedLandmark& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedLandmark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedLandmark* New() const final {
    return CreateMaybeMessage<NormalizedLandmark>(nullptr);
  }

  NormalizedLandmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedLandmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedLandmark& from);
  void MergeFrom(const NormalizedLandmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedLandmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedLandmark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVisibilityFieldNumber = 4,
    kPresenceFieldNumber = 5,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float visibility = 4;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // optional float presence = 5;
  bool has_presence() const;
  private:
  bool _internal_has_presence() const;
  public:
  void clear_presence();
  float presence() const;
  void set_presence(float value);
  private:
  float _internal_presence() const;
  void _internal_set_presence(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float visibility_;
  float presence_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
};
// -------------------------------------------------------------------

class NormalizedLandmarkList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmarkList) */ {
 public:
  NormalizedLandmarkList();
  virtual ~NormalizedLandmarkList();

  NormalizedLandmarkList(const NormalizedLandmarkList& from);
  NormalizedLandmarkList(NormalizedLandmarkList&& from) noexcept
    : NormalizedLandmarkList() {
    *this = ::std::move(from);
  }

  inline NormalizedLandmarkList& operator=(const NormalizedLandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedLandmarkList& operator=(NormalizedLandmarkList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedLandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedLandmarkList* internal_default_instance() {
    return reinterpret_cast<const NormalizedLandmarkList*>(
               &_NormalizedLandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NormalizedLandmarkList& a, NormalizedLandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedLandmarkList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedLandmarkList* New() const final {
    return CreateMaybeMessage<NormalizedLandmarkList>(nullptr);
  }

  NormalizedLandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedLandmarkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedLandmarkList& from);
  void MergeFrom(const NormalizedLandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedLandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedLandmarkList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::mediapipe::NormalizedLandmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >*
      mutable_landmark();
  private:
  const ::mediapipe::NormalizedLandmark& _internal_landmark(int index) const;
  ::mediapipe::NormalizedLandmark* _internal_add_landmark();
  public:
  const ::mediapipe::NormalizedLandmark& landmark(int index) const;
  ::mediapipe::NormalizedLandmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmarkList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark > landmark_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// optional float x = 1;
inline bool Landmark::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Landmark::has_x() const {
  return _internal_has_x();
}
inline void Landmark::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Landmark::_internal_x() const {
  return x_;
}
inline float Landmark::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.x)
  return _internal_x();
}
inline void Landmark::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Landmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.x)
}

// optional float y = 2;
inline bool Landmark::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Landmark::has_y() const {
  return _internal_has_y();
}
inline void Landmark::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Landmark::_internal_y() const {
  return y_;
}
inline float Landmark::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.y)
  return _internal_y();
}
inline void Landmark::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Landmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.y)
}

// optional float z = 3;
inline bool Landmark::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Landmark::has_z() const {
  return _internal_has_z();
}
inline void Landmark::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Landmark::_internal_z() const {
  return z_;
}
inline float Landmark::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.z)
  return _internal_z();
}
inline void Landmark::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Landmark::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.z)
}

// optional float visibility = 4;
inline bool Landmark::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Landmark::has_visibility() const {
  return _internal_has_visibility();
}
inline void Landmark::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Landmark::_internal_visibility() const {
  return visibility_;
}
inline float Landmark::visibility() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.visibility)
  return _internal_visibility();
}
inline void Landmark::_internal_set_visibility(float value) {
  _has_bits_[0] |= 0x00000008u;
  visibility_ = value;
}
inline void Landmark::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.visibility)
}

// optional float presence = 5;
inline bool Landmark::_internal_has_presence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Landmark::has_presence() const {
  return _internal_has_presence();
}
inline void Landmark::clear_presence() {
  presence_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Landmark::_internal_presence() const {
  return presence_;
}
inline float Landmark::presence() const {
  // @@protoc_insertion_point(field_get:mediapipe.Landmark.presence)
  return _internal_presence();
}
inline void Landmark::_internal_set_presence(float value) {
  _has_bits_[0] |= 0x00000010u;
  presence_ = value;
}
inline void Landmark::set_presence(float value) {
  _internal_set_presence(value);
  // @@protoc_insertion_point(field_set:mediapipe.Landmark.presence)
}

// -------------------------------------------------------------------

// LandmarkList

// repeated .mediapipe.Landmark landmark = 1;
inline int LandmarkList::_internal_landmark_size() const {
  return landmark_.size();
}
inline int LandmarkList::landmark_size() const {
  return _internal_landmark_size();
}
inline void LandmarkList::clear_landmark() {
  landmark_.Clear();
}
inline ::mediapipe::Landmark* LandmarkList::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.LandmarkList.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >*
LandmarkList::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.LandmarkList.landmark)
  return &landmark_;
}
inline const ::mediapipe::Landmark& LandmarkList::_internal_landmark(int index) const {
  return landmark_.Get(index);
}
inline const ::mediapipe::Landmark& LandmarkList::landmark(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.LandmarkList.landmark)
  return _internal_landmark(index);
}
inline ::mediapipe::Landmark* LandmarkList::_internal_add_landmark() {
  return landmark_.Add();
}
inline ::mediapipe::Landmark* LandmarkList::add_landmark() {
  // @@protoc_insertion_point(field_add:mediapipe.LandmarkList.landmark)
  return _internal_add_landmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Landmark >&
LandmarkList::landmark() const {
  // @@protoc_insertion_point(field_list:mediapipe.LandmarkList.landmark)
  return landmark_;
}

// -------------------------------------------------------------------

// NormalizedLandmark

// optional float x = 1;
inline bool NormalizedLandmark::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_x() const {
  return _internal_has_x();
}
inline void NormalizedLandmark::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedLandmark::_internal_x() const {
  return x_;
}
inline float NormalizedLandmark::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.x)
  return _internal_x();
}
inline void NormalizedLandmark::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void NormalizedLandmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.x)
}

// optional float y = 2;
inline bool NormalizedLandmark::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_y() const {
  return _internal_has_y();
}
inline void NormalizedLandmark::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedLandmark::_internal_y() const {
  return y_;
}
inline float NormalizedLandmark::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.y)
  return _internal_y();
}
inline void NormalizedLandmark::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void NormalizedLandmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.y)
}

// optional float z = 3;
inline bool NormalizedLandmark::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_z() const {
  return _internal_has_z();
}
inline void NormalizedLandmark::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedLandmark::_internal_z() const {
  return z_;
}
inline float NormalizedLandmark::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.z)
  return _internal_z();
}
inline void NormalizedLandmark::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void NormalizedLandmark::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.z)
}

// optional float visibility = 4;
inline bool NormalizedLandmark::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_visibility() const {
  return _internal_has_visibility();
}
inline void NormalizedLandmark::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NormalizedLandmark::_internal_visibility() const {
  return visibility_;
}
inline float NormalizedLandmark::visibility() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.visibility)
  return _internal_visibility();
}
inline void NormalizedLandmark::_internal_set_visibility(float value) {
  _has_bits_[0] |= 0x00000008u;
  visibility_ = value;
}
inline void NormalizedLandmark::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.visibility)
}

// optional float presence = 5;
inline bool NormalizedLandmark::_internal_has_presence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NormalizedLandmark::has_presence() const {
  return _internal_has_presence();
}
inline void NormalizedLandmark::clear_presence() {
  presence_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float NormalizedLandmark::_internal_presence() const {
  return presence_;
}
inline float NormalizedLandmark::presence() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.presence)
  return _internal_presence();
}
inline void NormalizedLandmark::_internal_set_presence(float value) {
  _has_bits_[0] |= 0x00000010u;
  presence_ = value;
}
inline void NormalizedLandmark::set_presence(float value) {
  _internal_set_presence(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.presence)
}

// -------------------------------------------------------------------

// NormalizedLandmarkList

// repeated .mediapipe.NormalizedLandmark landmark = 1;
inline int NormalizedLandmarkList::_internal_landmark_size() const {
  return landmark_.size();
}
inline int NormalizedLandmarkList::landmark_size() const {
  return _internal_landmark_size();
}
inline void NormalizedLandmarkList::clear_landmark() {
  landmark_.Clear();
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.NormalizedLandmarkList.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >*
NormalizedLandmarkList::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.NormalizedLandmarkList.landmark)
  return &landmark_;
}
inline const ::mediapipe::NormalizedLandmark& NormalizedLandmarkList::_internal_landmark(int index) const {
  return landmark_.Get(index);
}
inline const ::mediapipe::NormalizedLandmark& NormalizedLandmarkList::landmark(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmarkList.landmark)
  return _internal_landmark(index);
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::_internal_add_landmark() {
  return landmark_.Add();
}
inline ::mediapipe::NormalizedLandmark* NormalizedLandmarkList::add_landmark() {
  // @@protoc_insertion_point(field_add:mediapipe.NormalizedLandmarkList.landmark)
  return _internal_add_landmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::NormalizedLandmark >&
NormalizedLandmarkList::landmark() const {
  // @@protoc_insertion_point(field_list:mediapipe.NormalizedLandmarkList.landmark)
  return landmark_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto
