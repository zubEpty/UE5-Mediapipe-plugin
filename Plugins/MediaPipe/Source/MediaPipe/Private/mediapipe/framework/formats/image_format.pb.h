// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/image_format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto;
namespace mediapipe {
class ImageFormat;
class ImageFormatDefaultTypeInternal;
extern ImageFormatDefaultTypeInternal _ImageFormat_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::ImageFormat* Arena::CreateMaybeMessage<::mediapipe::ImageFormat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum ImageFormat_Format : int {
  ImageFormat_Format_UNKNOWN = 0,
  ImageFormat_Format_SRGB = 1,
  ImageFormat_Format_SRGBA = 2,
  ImageFormat_Format_GRAY8 = 3,
  ImageFormat_Format_GRAY16 = 4,
  ImageFormat_Format_YCBCR420P = 5,
  ImageFormat_Format_YCBCR420P10 = 6,
  ImageFormat_Format_SRGB48 = 7,
  ImageFormat_Format_SRGBA64 = 8,
  ImageFormat_Format_VEC32F1 = 9,
  ImageFormat_Format_VEC32F2 = 12,
  ImageFormat_Format_LAB8 = 10,
  ImageFormat_Format_SBGRA = 11
};
bool ImageFormat_Format_IsValid(int value);
constexpr ImageFormat_Format ImageFormat_Format_Format_MIN = ImageFormat_Format_UNKNOWN;
constexpr ImageFormat_Format ImageFormat_Format_Format_MAX = ImageFormat_Format_VEC32F2;
constexpr int ImageFormat_Format_Format_ARRAYSIZE = ImageFormat_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_Format_descriptor();
template<typename T>
inline const std::string& ImageFormat_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_Format_descriptor(), enum_t_value);
}
inline bool ImageFormat_Format_Parse(
    const std::string& name, ImageFormat_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat_Format>(
    ImageFormat_Format_descriptor(), name, value);
}
// ===================================================================

class ImageFormat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ImageFormat) */ {
 public:
  ImageFormat();
  virtual ~ImageFormat();

  ImageFormat(const ImageFormat& from);
  ImageFormat(ImageFormat&& from) noexcept
    : ImageFormat() {
    *this = ::std::move(from);
  }

  inline ImageFormat& operator=(const ImageFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFormat& operator=(ImageFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageFormat* internal_default_instance() {
    return reinterpret_cast<const ImageFormat*>(
               &_ImageFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageFormat& a, ImageFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFormat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFormat* New() const final {
    return CreateMaybeMessage<ImageFormat>(nullptr);
  }

  ImageFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFormat& from);
  void MergeFrom(const ImageFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ImageFormat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImageFormat_Format Format;
  static constexpr Format UNKNOWN =
    ImageFormat_Format_UNKNOWN;
  static constexpr Format SRGB =
    ImageFormat_Format_SRGB;
  static constexpr Format SRGBA =
    ImageFormat_Format_SRGBA;
  static constexpr Format GRAY8 =
    ImageFormat_Format_GRAY8;
  static constexpr Format GRAY16 =
    ImageFormat_Format_GRAY16;
  static constexpr Format YCBCR420P =
    ImageFormat_Format_YCBCR420P;
  static constexpr Format YCBCR420P10 =
    ImageFormat_Format_YCBCR420P10;
  static constexpr Format SRGB48 =
    ImageFormat_Format_SRGB48;
  static constexpr Format SRGBA64 =
    ImageFormat_Format_SRGBA64;
  static constexpr Format VEC32F1 =
    ImageFormat_Format_VEC32F1;
  static constexpr Format VEC32F2 =
    ImageFormat_Format_VEC32F2;
  static constexpr Format LAB8 =
    ImageFormat_Format_LAB8;
  static constexpr Format SBGRA =
    ImageFormat_Format_SBGRA;
  static inline bool Format_IsValid(int value) {
    return ImageFormat_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    ImageFormat_Format_Format_MIN;
  static constexpr Format Format_MAX =
    ImageFormat_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    ImageFormat_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return ImageFormat_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return ImageFormat_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(const std::string& name,
      Format* value) {
    return ImageFormat_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mediapipe.ImageFormat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageFormat

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::ImageFormat_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::ImageFormat_Format>() {
  return ::mediapipe::ImageFormat_Format_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fimage_5fformat_2eproto
