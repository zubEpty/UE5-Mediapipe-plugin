// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/motion/optical_flow_field_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto;
namespace mediapipe {
class OpticalFlowFieldData;
class OpticalFlowFieldDataDefaultTypeInternal;
extern OpticalFlowFieldDataDefaultTypeInternal _OpticalFlowFieldData_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::OpticalFlowFieldData* Arena::CreateMaybeMessage<::mediapipe::OpticalFlowFieldData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class OpticalFlowFieldData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.OpticalFlowFieldData) */ {
 public:
  OpticalFlowFieldData();
  virtual ~OpticalFlowFieldData();

  OpticalFlowFieldData(const OpticalFlowFieldData& from);
  OpticalFlowFieldData(OpticalFlowFieldData&& from) noexcept
    : OpticalFlowFieldData() {
    *this = ::std::move(from);
  }

  inline OpticalFlowFieldData& operator=(const OpticalFlowFieldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpticalFlowFieldData& operator=(OpticalFlowFieldData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpticalFlowFieldData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpticalFlowFieldData* internal_default_instance() {
    return reinterpret_cast<const OpticalFlowFieldData*>(
               &_OpticalFlowFieldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpticalFlowFieldData& a, OpticalFlowFieldData& b) {
    a.Swap(&b);
  }
  inline void Swap(OpticalFlowFieldData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpticalFlowFieldData* New() const final {
    return CreateMaybeMessage<OpticalFlowFieldData>(nullptr);
  }

  OpticalFlowFieldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpticalFlowFieldData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpticalFlowFieldData& from);
  void MergeFrom(const OpticalFlowFieldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpticalFlowFieldData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.OpticalFlowFieldData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 3,
    kDyFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated float dx = 3 [packed = true];
  int dx_size() const;
  private:
  int _internal_dx_size() const;
  public:
  void clear_dx();
  private:
  float _internal_dx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_dx() const;
  void _internal_add_dx(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_dx();
  public:
  float dx(int index) const;
  void set_dx(int index, float value);
  void add_dx(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      dx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_dx();

  // repeated float dy = 4 [packed = true];
  int dy_size() const;
  private:
  int _internal_dy_size() const;
  public:
  void clear_dy();
  private:
  float _internal_dy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_dy() const;
  void _internal_add_dy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_dy();
  public:
  float dy(int index) const;
  void set_dy(int index, float value);
  void add_dy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      dy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_dy();

  // optional int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.OpticalFlowFieldData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > dx_;
  mutable std::atomic<int> _dx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > dy_;
  mutable std::atomic<int> _dy_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpticalFlowFieldData

// optional int32 width = 1;
inline bool OpticalFlowFieldData::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpticalFlowFieldData::has_width() const {
  return _internal_has_width();
}
inline void OpticalFlowFieldData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpticalFlowFieldData::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpticalFlowFieldData::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpticalFlowFieldData.width)
  return _internal_width();
}
inline void OpticalFlowFieldData::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void OpticalFlowFieldData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.OpticalFlowFieldData.width)
}

// optional int32 height = 2;
inline bool OpticalFlowFieldData::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpticalFlowFieldData::has_height() const {
  return _internal_has_height();
}
inline void OpticalFlowFieldData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpticalFlowFieldData::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpticalFlowFieldData::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.OpticalFlowFieldData.height)
  return _internal_height();
}
inline void OpticalFlowFieldData::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void OpticalFlowFieldData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.OpticalFlowFieldData.height)
}

// repeated float dx = 3 [packed = true];
inline int OpticalFlowFieldData::_internal_dx_size() const {
  return dx_.size();
}
inline int OpticalFlowFieldData::dx_size() const {
  return _internal_dx_size();
}
inline void OpticalFlowFieldData::clear_dx() {
  dx_.Clear();
}
inline float OpticalFlowFieldData::_internal_dx(int index) const {
  return dx_.Get(index);
}
inline float OpticalFlowFieldData::dx(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.OpticalFlowFieldData.dx)
  return _internal_dx(index);
}
inline void OpticalFlowFieldData::set_dx(int index, float value) {
  dx_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.OpticalFlowFieldData.dx)
}
inline void OpticalFlowFieldData::_internal_add_dx(float value) {
  dx_.Add(value);
}
inline void OpticalFlowFieldData::add_dx(float value) {
  _internal_add_dx(value);
  // @@protoc_insertion_point(field_add:mediapipe.OpticalFlowFieldData.dx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpticalFlowFieldData::_internal_dx() const {
  return dx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpticalFlowFieldData::dx() const {
  // @@protoc_insertion_point(field_list:mediapipe.OpticalFlowFieldData.dx)
  return _internal_dx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpticalFlowFieldData::_internal_mutable_dx() {
  return &dx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpticalFlowFieldData::mutable_dx() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.OpticalFlowFieldData.dx)
  return _internal_mutable_dx();
}

// repeated float dy = 4 [packed = true];
inline int OpticalFlowFieldData::_internal_dy_size() const {
  return dy_.size();
}
inline int OpticalFlowFieldData::dy_size() const {
  return _internal_dy_size();
}
inline void OpticalFlowFieldData::clear_dy() {
  dy_.Clear();
}
inline float OpticalFlowFieldData::_internal_dy(int index) const {
  return dy_.Get(index);
}
inline float OpticalFlowFieldData::dy(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.OpticalFlowFieldData.dy)
  return _internal_dy(index);
}
inline void OpticalFlowFieldData::set_dy(int index, float value) {
  dy_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.OpticalFlowFieldData.dy)
}
inline void OpticalFlowFieldData::_internal_add_dy(float value) {
  dy_.Add(value);
}
inline void OpticalFlowFieldData::add_dy(float value) {
  _internal_add_dy(value);
  // @@protoc_insertion_point(field_add:mediapipe.OpticalFlowFieldData.dy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpticalFlowFieldData::_internal_dy() const {
  return dy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpticalFlowFieldData::dy() const {
  // @@protoc_insertion_point(field_list:mediapipe.OpticalFlowFieldData.dy)
  return _internal_dy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpticalFlowFieldData::_internal_mutable_dy() {
  return &dy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpticalFlowFieldData::mutable_dy() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.OpticalFlowFieldData.dy)
  return _internal_mutable_dy();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2fmotion_2foptical_5fflow_5ffield_5fdata_2eproto
