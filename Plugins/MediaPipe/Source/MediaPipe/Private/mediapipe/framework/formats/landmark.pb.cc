// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/landmark.proto

#include "mediapipe/framework/formats/landmark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2flandmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2flandmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto;
namespace mediapipe {
class LandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Landmark> _instance;
} _Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkList> _instance;
} _LandmarkList_default_instance_;
class NormalizedLandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedLandmark> _instance;
} _NormalizedLandmark_default_instance_;
class NormalizedLandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedLandmarkList> _instance;
} _NormalizedLandmarkList_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Landmark_default_instance_;
    new (ptr) ::mediapipe::Landmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Landmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto}, {}};

static void InitDefaultsscc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LandmarkList_default_instance_;
    new (ptr) ::mediapipe::LandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto}, {
      &scc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,}};

static void InitDefaultsscc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmark_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto}, {}};

static void InitDefaultsscc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmarkList_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto}, {
      &scc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fframework_2fformats_2flandmark_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fframework_2fformats_2flandmark_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fframework_2fformats_2flandmark_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, z_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, visibility_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Landmark, presence_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarkList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LandmarkList, landmark_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, z_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, visibility_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmark, presence_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, landmark_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mediapipe::Landmark)},
  { 15, 21, sizeof(::mediapipe::LandmarkList)},
  { 22, 32, sizeof(::mediapipe::NormalizedLandmark)},
  { 37, 43, sizeof(::mediapipe::NormalizedLandmarkList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Landmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LandmarkList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedLandmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_NormalizedLandmarkList_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fframework_2fformats_2flandmark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*mediapipe/framework/formats/landmark.p"
  "roto\022\tmediapipe\"Q\n\010Landmark\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\022\n\nvisibility\030\004 \001(\002"
  "\022\020\n\010presence\030\005 \001(\002\"5\n\014LandmarkList\022%\n\010la"
  "ndmark\030\001 \003(\0132\023.mediapipe.Landmark\"[\n\022Nor"
  "malizedLandmark\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n"
  "\001z\030\003 \001(\002\022\022\n\nvisibility\030\004 \001(\002\022\020\n\010presence"
  "\030\005 \001(\002\"I\n\026NormalizedLandmarkList\022/\n\010land"
  "mark\030\001 \003(\0132\035.mediapipe.NormalizedLandmar"
  "kB3\n\"com.google.mediapipe.formats.protoB"
  "\rLandmarkProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_sccs[4] = {
  &scc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,
  &scc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,
  &scc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,
  &scc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_once;
static bool descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto = {
  &descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_initialized, descriptor_table_protodef_mediapipe_2fframework_2fformats_2flandmark_2eproto, "mediapipe/framework/formats/landmark.proto", 414,
  &descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_once, descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_sccs, descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto::offsets,
  file_level_metadata_mediapipe_2fframework_2fformats_2flandmark_2eproto, 4, file_level_enum_descriptors_mediapipe_2fframework_2fformats_2flandmark_2eproto, file_level_service_descriptors_mediapipe_2fframework_2fformats_2flandmark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fframework_2fformats_2flandmark_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto), true);
namespace mediapipe {

// ===================================================================

void Landmark::InitAsDefaultInstance() {
}
class Landmark::_Internal {
 public:
  using HasBits = decltype(std::declval<Landmark>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_presence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Landmark::Landmark()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&x_)) + sizeof(presence_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&presence_) -
      reinterpret_cast<char*>(&x_)) + sizeof(presence_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:mediapipe.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
}

void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Landmark& Landmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Landmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&presence_) -
        reinterpret_cast<char*>(&x_)) + sizeof(presence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float presence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_presence(&has_bits);
          presence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Landmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_visibility(), target);
  }

  // optional float presence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_presence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Landmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float visibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float presence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Landmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Landmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      presence_ = from.presence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Landmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(visibility_, other->visibility_);
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Landmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
class LandmarkList::_Internal {
 public:
  using HasBits = decltype(std::declval<LandmarkList>()._has_bits_);
};

LandmarkList::LandmarkList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarkList)
}

void LandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarkList)
  SharedDtor();
}

void LandmarkList::SharedDtor() {
}

void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList& LandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.Landmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LandmarkList)
    MergeFrom(*source);
  }
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void LandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  landmark_.InternalSwap(&other->landmark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedLandmark::InitAsDefaultInstance() {
}
class NormalizedLandmark::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedLandmark>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_presence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NormalizedLandmark::NormalizedLandmark()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.NormalizedLandmark)
}
NormalizedLandmark::NormalizedLandmark(const NormalizedLandmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&x_)) + sizeof(presence_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmark)
}

void NormalizedLandmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&presence_) -
      reinterpret_cast<char*>(&x_)) + sizeof(presence_));
}

NormalizedLandmark::~NormalizedLandmark() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmark)
  SharedDtor();
}

void NormalizedLandmark::SharedDtor() {
}

void NormalizedLandmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedLandmark& NormalizedLandmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedLandmark_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
  return *internal_default_instance();
}


void NormalizedLandmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&presence_) -
        reinterpret_cast<char*>(&x_)) + sizeof(presence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NormalizedLandmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float presence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_presence(&has_bits);
          presence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedLandmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_visibility(), target);
  }

  // optional float presence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_presence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmark)
  return target;
}

size_t NormalizedLandmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float visibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float presence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedLandmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmark)
    MergeFrom(*source);
  }
}

void NormalizedLandmark::MergeFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      presence_ = from.presence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedLandmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmark::CopyFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmark::IsInitialized() const {
  return true;
}

void NormalizedLandmark::InternalSwap(NormalizedLandmark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(visibility_, other->visibility_);
  swap(presence_, other->presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedLandmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedLandmarkList::InitAsDefaultInstance() {
}
class NormalizedLandmarkList::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedLandmarkList>()._has_bits_);
};

NormalizedLandmarkList::NormalizedLandmarkList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.NormalizedLandmarkList)
}
NormalizedLandmarkList::NormalizedLandmarkList(const NormalizedLandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmarkList)
}

void NormalizedLandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
}

NormalizedLandmarkList::~NormalizedLandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmarkList)
  SharedDtor();
}

void NormalizedLandmarkList::SharedDtor() {
}

void NormalizedLandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedLandmarkList& NormalizedLandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedLandmarkList_mediapipe_2fframework_2fformats_2flandmark_2eproto.base);
  return *internal_default_instance();
}


void NormalizedLandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NormalizedLandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.NormalizedLandmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedLandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmarkList)
  return target;
}

size_t NormalizedLandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedLandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmarkList)
    MergeFrom(*source);
  }
}

void NormalizedLandmarkList::MergeFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void NormalizedLandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmarkList::CopyFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmarkList::IsInitialized() const {
  return true;
}

void NormalizedLandmarkList::InternalSwap(NormalizedLandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  landmark_.InternalSwap(&other->landmark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedLandmarkList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::Landmark* Arena::CreateMaybeMessage< ::mediapipe::Landmark >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LandmarkList* Arena::CreateMaybeMessage< ::mediapipe::LandmarkList >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LandmarkList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedLandmark* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmark >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::NormalizedLandmark >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::NormalizedLandmarkList* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmarkList >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::NormalizedLandmarkList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
